:PROPERTIES:
:ID:       040CA046-5894-4549-A690-D4DD59BC2300
:END:
#+TITLE: init.org
#+STARTUP: content
#+filetags: :project:

File was previously named init.org. it was created when I used init.el with outline mode and linked to org-mode headings

* Leftover Code from Vanilla Emacs
#+begin_src emacs-lisp :tangle no
;;; custom

(setq custom-file (concat user-emacs-directory "emacs-custom.el"))
(load custom-file)
(load "custom-extensions")

;;; [[id:7BD62B3E-5DC9-4186-A8F8-8BE13F43F6DB][org]]

;; TODO As an alias for counsel-outline, does advising counsel-org-goto also
;; advice counsel-outline? We don't need the advice for outline files.
;; (defun org-init-edit (old-func &rest args)
;;   "Advice used to wrap counsel-org-goto to edit the first src block under the
;; selected heading. Works best if the selected heading has a single code block."
;;   (apply old-func args)
;;   (if (equal buffer-file-name
;;              (expand-file-name
;;               (concat
;;                (file-name-as-directory user-emacs-directory)
;;                "init.org")))
;;       (progn
;;       (org-babel-next-src-block)
;;       (org-edit-special))))

;; (advice-add 'counsel-org-goto :around 'org-init-edit)

(defun my/org-attach-reveal-in-emacs ()
  "Show the attachment directory of the current outline node in deer.
  Will create an attachment and folder if it doesn't exist yet.
  Respects `org-attach-preferred-new-method'."
  (interactive)
  (deer (org-attach-dir-get-create)))

;; see org-file-apps(-*). By default text files are opened in Emacs. If point is
;; on a headline, offer to open all links in headline and entry text. See also
;; org-link-frame-setup
;; org-mark-ring-push (automatic for commands following internal links)
;; org-mark-ring-goto
;; org-next-link
;; org-previous-link
;; org-insert-link-global/org-open-at-point-global
(defun my/org-open-at-point (&optional arg)
  "Modified to distinguish between headings with attached directories and
  files, and to open directories as normal for the original
  function--org-attach-reveal or org-attach-reveal-in-emacs--but
  to use org-attach-open or org-attach-open-in-emacs for attached files (i.e.,
  attachments with the ID property)."
  (interactive "P")
  (org-load-modules-maybe)
  (setq org-window-config-before-follow-link (current-window-configuration))
  (org-remove-occur-highlights nil nil t)
  (unless (run-hook-with-args-until-success 'org-open-at-point-functions)
    (let* ((context
            ;; Only consider supported types, even if they are not the
            ;; closest one.
            (org-element-lineage
             (org-element-context)
             '(clock comment comment-block footnote-definition
               footnote-reference headline inline-src-block inlinetask
               keyword link node-property planning src-block timestamp)
             t))
           (type (org-element-type context))
           (value (org-element-property :value context))
           (my/id (org-element-property :ID context)))
      (cond
       ((not type) (user-error "No link found"))
       ;; No valid link at point.  For convenience, look if something
       ;; looks like a link under point in some specific places.
       ((memq type '(comment comment-block node-property keyword))
        (call-interactively #'org-open-at-point-global))
       ;; On a headline or an inlinetask, but not on a timestamp,
       ;; a link, a footnote reference.
       ((memq type '(headline inlinetask))
        (org-match-line org-complex-heading-regexp)
        (if (and (match-beginning 5)
                 (>= (point) (match-beginning 5))
                 (< (point) (match-end 5)))
            ;; On tags.
            (org-tags-view
             arg
             (save-excursion
               (let* ((beg (match-beginning 5))
                      (end (match-end 5))
                      (beg-tag (or (search-backward ":" beg 'at-limit) (point)))
                      (end-tag (search-forward ":" end nil 2)))
                 (buffer-substring (1+ beg-tag) (1- end-tag)))))
          ;; Not on tags.
          (pcase (org-offer-links-in-entry (current-buffer) (point) arg)
            (`(nil . ,_)
             (require 'org-attach)
             (if my/id
                 (progn
                   (message "Opening attachment-file")
                   (if (equal arg '(4))
                       (org-attach-open-in-emacs)
                     (org-attach-open)))
               (message "Opening attachment-dir")
               (if (equal arg '(4))
                   (my/org-attach-reveal-in-emacs)
                 (org-attach-reveal))))
            (`(,links . ,links-end)
             (dolist (link (if (stringp links) (list links) links))
               (search-forward link nil links-end)
               (goto-char (match-beginning 0))
               (org-open-at-point arg))))))
       ;; On a footnote reference or at definition's label.
       ((or (eq type 'footnote-reference)
            (and (eq type 'footnote-definition)
                 (save-excursion
                   ;; Do not validate action when point is on the
                   ;; spaces right after the footnote label, in order
                   ;; to be on par with behavior on links.
                   (skip-chars-forward " \t")
                   (let ((begin
                          (org-element-property :contents-begin context)))
                     (if begin (< (point) begin)
                       (= (org-element-property :post-affiliated context)
                          (line-beginning-position)))))))
        (org-footnote-action))
       ;; On a planning line.  Check if we are really on a timestamp.
       ((and (eq type 'planning)
             (org-in-regexp org-ts-regexp-both nil t))
        (org-follow-timestamp-link))
       ;; On a clock line, make sure point is on the timestamp
       ;; before opening it.
       ((and (eq type 'clock)
             value
             (>= (point) (org-element-property :begin value))
             (<= (point) (org-element-property :end value)))
        (org-follow-timestamp-link))
       ((eq type 'src-block) (org-babel-open-src-block-result))
       ;; Do nothing on white spaces after an object.
       ((>= (point)
            (save-excursion
              (goto-char (org-element-property :end context))
              (skip-chars-backward " \t")
              (point)))
        (user-error "No link found"))
       ((eq type 'inline-src-block) (org-babel-open-src-block-result))
       ((eq type 'timestamp) (org-follow-timestamp-link))
       ((eq type 'link) (org-link-open context arg))
       (t (user-error "No link found")))))
  (run-hook-with-args 'org-follow-link-hook))

;; Not sure I ever used this. Must have grabbed it from some online source.
(defun my-org-custom-sparse-tree (todo-only match &optional
                                            match-body parents-body)
  "Create a custom sparse tree that only shows matched headings and parents.
For TODO-ONLY and MATCH see `org-match-sparse-tree'.
If MATCH-BODY is non-nil the bodies of the matches are shown.
If PARENTS-BODY is non-nil the bodies of the parents are shown."
  ;; Create the sparse tree.
  (org-match-sparse-tree todo-only match)
  (let ((pt-first (save-excursion
                    (org-first-headline-recenter)
                    (point)))
        (hls org-occur-highlights))
    ;; Hide everything.
    (outline-flag-region pt-first (point-max) t)
    ;; For each occur highlight overlay (the matches).
    (dolist (hl hls)
      (save-excursion
        (goto-char (overlay-start hl))
        ;; Unhide match.
        (outline-show-heading)
        (when match-body (outline-show-entry))
        ;; Unhide parents.
        (while (org-up-heading-safe)
          (outline-show-heading)
          (when parents-body (outline-show-entry))))))
  ;; Hide all archived subtrees again.
  (org-hide-archived-subtrees (point-min) (point-max)))


;;;; [[id:94FB1BA2-4C7B-4A25-B223-3B10751AC2BD][pdf-tools-display-buffer-alist]]

;; Each element of display-buffer-alist is structured like
;; '(CONDITION . (FUNCTIONS . ALIST)). The value of each alist element is known
;; as an action.
;; CONDITION is a regexp matching buffer name, or a function that takes two
;; arguments - a buffer name and the ACTION argument of display-buffer - and
;; returns a boolean
;; FUNCTIONS is a (list of) action function(s), which accept two arguments - a
;; buffer to display and an alist of the same form as ALIST. See display-buffer
;; for a description of available action functions. Also https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Functions.html.
;; ALIST is an action alist. See display-buffer for a description of available
;; action alist elements. Also https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Alists.html.
;; If CONDITION succeeds, display-buffer adds action (FUNCTIONS . ALIST) to a
;; list of actions it will try.
;; Since actions are cons cells, you can omit the period between FUNCTIONS and
;; ALIST if you also omit the outer parentheses around ALIST.

(defun pdf-outline-buffer-p (buffer &rest _)
  "Buffer's major-mode is pdf-outline-mode"
  (with-current-buffer buffer
    (derived-mode-p 'pdf-outline-buffer-mode)))

(defun pdf-view-p (buffer &rest _)
  "Buffer's major-mode is pdf-view-mode"
  (with-current-buffer buffer
    (derived-mode-p 'pdf-view-mode)))

;; By default, when calling outline from within a window displaying a PDF
;; buffer, the outline opens in the selectd window. pdf-outline-display-link and
;; other commands open the PDF in a second window. In contrast,
;; pdf-outline-follow-link-and-quit re-displays the PDF in its original
;; window. There is a variable (pdf-outline-display-buffer-action) that can be
;; used; however, display-buffer-alist may be more reliable for overcoming
;; hardcoded display issues for all pdf-tools buffers.

;; Reuse outline's previous window or pop one open. Avoid the selected window
;; even if is also the outline's previous window. Windows may or may not be
;; split to pop up a window.
(add-to-list 'display-buffer-alist
             '(pdf-outline-buffer-p
               (display-buffer-in-previous-window display-buffer-pop-up-window)
               (inhibit-same-window . t)
               (reusable-frames)))

;; Reuse PDF's previous window in current frame
(add-to-list 'display-buffer-alist
             '(pdf-view-p
               display-buffer-in-previous-window
               (reusable-frames)))
#+end_src

* installation
** MacOS
*** [[https://github.com/daviderestivo/homebrew-emacs-head][emacs-head]] :current:
~brew install emacs-head@28 --with-cocoa --with-xwidgets~.
**** Flags
Note that JSON support is built-in in later versions, as verified by ~(functionp json-parse-string)~. And ~--with-xwidgets~ permits us to run a browser natively via ~xwidget-webkit-browse-url~, just like on Linux! Note that xwidget browsing opens up security vulnerabilities beyond those of simply using a browser. In particular, some authors of Emacs-based browsing tools recommend avoiding any browsing activity related to accounts or credentials: https://np.reddit.com/r/emacs/comments/ifieb8/towards_a_serious_modern_browser_in_emacs/g2paqof/ and https://news.ycombinator.com/item?id=24259449, and https://github.com/akirakyle/emacs-webkit.

If you use xwwp, the author claims you don't need to compile with ~--with-xwidgets~: https://www.reddit.com/r/emacs/comments/jyowe0/introducing_emacswebkit_a_successor_to/. Does it use Xwidget-WebKit mode?
*** emacs-mac
~brew install --cask emacs-mac~
**** Issues
This distribution seems to break org-noter. It pulls up a blank frame, hangs, and prevents exit.
* Random Tasks
** TODO Keymaps to investigate
Some keymaps should be bound to leader. E.g., pdfview keymaps when a PDF is open.
*** ivy-minibuffer-map
*** company-mode-map
*** company-search-map
*** company-active-map
*** org-*
*** org-roam-bibtex-*
*** org-noter-*
*** pdf*
*** ivy-ref-*
*** ivy-bibtex-*
*** ess-*
*** info
** TODO commands to bind
*** counsel-find-library
** TODO Packages to check out
*** https://www.tabnine.com/blog/17-cool-emacs-packages-for-productivity-in-2021/
*** god-mode
An Emacs-friendly alternative to evil that might work with which-key
*** smartrep
*** chemacs2 / with-emacs script
To use Emacs to edit init.el/init.org that have been marked up by git for eventual merging.
*** Custom inverse tangling
org-babel-detangle may mangle files. Need to test.

org-tanglesync can only detangle a single block to a file. This presents a problem for init.org

alphapapa/outorg edits comment sections of source code files in org-mode. Depends on outshine.

phillord/lentic
*** org alternatives
**** outline/outshine
outshine is unmaintained. Testing revealed that heading promotion/demotion did not work as expected.
** TODO Configs to check out
*** https://config.daviwil.com/
Discovered through a stream at https://www.youtube.com/watch?v=50Vsh4qw-E4. In particular, can browse qutebrowser within emacs. May depend on exwm to control X windows through emacs.
* custom
:PROPERTIES:
:ID:       831DC47C-C458-4939-8EFA-CC669529F452
:END:
** Customization
*** Summary
**** Symbol Properties
***** theme-value
An alist whose elements have the form ~(THEME VALUE)~. Elements are ordered by decreasing theme precedence.
***** standard-value
Used by ~defcustom~ to initialize void variables that have not been customized (i.e., have a ~saved-value~ property). Set to the /default/ argument to ~custom-declare-variable~ (/standard/ argument of ~defcustom~). Stores an expression that is evaluated to retrieve the actual standard value.
***** saved-value
Used by ~defcustom~ to initialize void variables that have been customized. Set by the customization UI (~custom-set-variables/faces~) and ~custom-theme-set-variables/faces~ when no ~defcustom~ previously declared the variable. Stores an expression that is evaluated to retrieve the actual saved value.
***** customized-value
Used to distinguish customizations for the current session from those that are permanently saved (i.e., ~saved-value~).
***** custom-set
Stores a function to set variable value on initialization. Set to the ~:set~ keyword to ~custom-declare-variable~.
***** custom-get
Stores a function to get variable value on initialization. Set to the ~:get~ keyword to ~custom-declare-variable~.
***** theme-settings
Contains settings for a theme symbol in ~custom-known-themes~.
**** Initialization functions
Called by ~custom-declare-variable~ (and thus ~defcustom~) to initialize a variable. These functions are passed ~standard-value~ as /exp/. The functions that query ~custom-set~ for a setter function use ~set-default~ if none is available. When setting void variables, ~saved-value~ is always preferred to /exp/.
****** custom-initialize-default /symbol exp/
Does nothing if a default value exists; otherwise, calls ~set-default~ with /symbol/ and the result of evaluating ~saved-value~ property or /exp/.

Commonly used by variables whose setter function enables or disables a minor mode, to avoid enabling the mode on ~defcusom~ while permitting it by customizing the variable. See ~custom-set-minor-mode~.
****** custom-initialize-set /symbol exp/
Like ~custom-initialize-default~ but calls the setter function.
****** custom-initialize-reset /symbol exp/
The default initialization function. Calls the setter function with /symbol/ and the value returned by either the getter function in ~custom-get~, the default value, or the result of evaluating ~saved-value~ or ~exp~.

In other words, like ~custom-initialize-set~ but additionally resets non-void variables by calling the setter function with /symbol/ and its current value.
****** custom-initialize-changed /symbol exp/
Like ~custom-initialize-reset~ but only ever uses ~set-default~ for /exp/.
****** custom-initialize-delay
Used for preloaded files and autoloaded variables.
**** defcustom /SYMBOL STANDARD DOC &rest ARGS/
qdefcustom~ is a macro that expands to a call to ~custom-declare-variable~ with the values of /SYMBOL/ and /STANDARD/ quoted.

#+begin_src emacs-lisp
(macroexpand '(defcustom x (+ 1 2 3) nil :set apples :initialize pears))
;; (custom-declare-variable 'x '(+ 1 2 3) nil :set apples :initialize pears)
#+end_src
**** custom-declare-variable /SYMBOL DEFAULT DOC &rest ARGS/
Mostly equivalent to calling ~defcustom~ with an extra level of quoting for the first two arguments.

Sets the ~standard-value~ property to /DEFAULT/. Processes the key-value pairs in ~ARGS~. In particular, the ~custom-set~ property is set to the value of the ~:set~ keyword. Any function passed to ~:initialize~ is called (defaults to calling ~custom-initialize-reset~) with /symbol/ and /default/. If the ~saved-value~ property is non-~nil~ and the ~caar~ of the ~theme-value~ property (i.e., the highest precedence theme associated with this variable) isn't the ~user~ theme, nullify ~saved-value~. The source code comments say this can only be the case under normal circumstances when:
1. The user loaded a theme that had a setting for an unbound variable, so we stashed the theme setting under the saved-value property in `custom-theme-recalc-variable'.
2. Then, Emacs evaluated the defcustom for the option (e.g., something required the file where the option is defined).  If we don't reset it and the user later sets this variable via Customize, we might end up saving the theme setting in the custom-file.  See the test `custom-test-no-saved-value-after-customizing-option'.

ARGS consists of keyword-value pairs described in ~defcustom~:
1. :type
2. :options
3. :initialize
4. :set
5. :get
6. :require
7. :set-after
8. :risky
9. :safe
10. :local
11. :group
12. :link
13. :version
14. :package-version
15. :tag
16. :load
**** defface
**** custom-declare-face
**** custom-variable-p
Returns non-~nil~ if variable is customizable (i.e., is an alias for one or has non-~nil~ ~standard-value~ or ~custom-autoload~).
**** custom--standard-value
Retrieve the standard value from the expression stored in ~standard-value~.
**** custom-set-default
Set-default, unless ~custom-local-buffer~ is non-~nil~ in which case ~set~ is used to set a variable locally for a buffer (presumably a la ~make-local-variable~). ~custom-local-buffer~ is local to each customization buffer according to cus-edit.el; however, I could not find what sets it. There is a separate mechanism for making variables automatically buffer local (i.e., across all buffers a la ~make-variable-buffer-local~) in ~custom-declare-variable~.
**** custom-set-minor-mode
Set function for minor mode variables. See ~custom-initialize-default~.
**** custom-known-themes
Themes defined with ~deftheme~ are added to the front of this list, which is ~'(user changed)~ by default.
**** custom-theme-p /theme/
Non-~nil~ when /theme/ is defined in ~custom-known-themes~.
**** custom--should-apply-setting
Return ~t~ if ~custom--inhibit-theme-enable~ is ~nil~ or if it has its default value of ~apply-only-user~ and the theme is ~user~.
**** custom-push-theme
Can remove, replace, or add an element (~(THEME VALUE)~) to the ~theme-value~ or ~theme-face~ property based on the theme passed. For the latter two actions, the new element is installed at the front of the list. When creating a theme in particular, checks ~custom--should-apply-setting~. If true, (1) if the current value was set outside of the customize system, the first time ~theme-value~ is set an element ~(changed CURRENT-VALUE)~ will be created with the fake theme ~changed~ to hold the current value in case ~THEME~ is later disabled and the value is needed; (2) updates ~theme-value~. Regardless of truth, ~theme-settings~ is updated for /theme/. Note that /theme/ names a void variable but does have properties.
**** custom-set-variables /&rest args/
Calls ~custom-theme-set-variables~ with /theme/ set to ~'user~. This is the function used by the customization UI.
**** custom-theme-set-variables /theme &rest args/
Each arg in /args/ should be a list of the form ~(SYMBOL EXP [NOW [REQUEST [COMMENT]]])~.

For each element in /args/, calls ~custom-push-theme~ to update ~theme-value~ for ~SYMBOL~ using /theme/ and ~EXP~ (this also checks ~custom--should-apply-settings~). Then calls ~custom--should-apply-setting~ to check whether to continue and set ~SYMBOL~. That is, continue if this function was called by using the normal customization system UI (i.e., through ~custom-set-variables~) or is called with ~custom--inhibit-theme-enable~ nullified. Saves ~EXP~ to ~saved-value~ property, then if ~(default-boundp symbol)~ it calls the value of the ~custom-set~ property or ~custom-set-default~ to overwrite ~SYMBOL~ with the result of evaluating ~EXP~.

Thus, if called before ~defcustom~ simply sets ~saved-value~ but if after ~defcustom~ or e.g. ~setq~, it immediately calls the setter function (all if ~custom--should-apply-settings~).
**** deftheme /theme/
Calls ~custom-make-theme-feature~ and assigns result to *feature*. Quotes /theme/ and *feature* and passes to call to ~custom-declare-theme~.
**** custom-make-theme-feature /theme/
Given a symbol THEME, create a new symbol by appending "-theme".  Store this symbol in the ‘theme-feature’ property of
THEME.  Calling ‘provide-theme’ to provide THEME actually puts ‘THEME-theme’ into ‘features’.

This allows for a file-name convention for autoloading themes: Every theme X has a property ‘provide-theme’ [sic;
actually 'theme-feature'] whose value is "X-theme".  (load-theme X) then attempts to load the file ‘X-theme.el’.
**** custom-declare-theme /theme/ /feature/
/feature/ is normally the symbol created from /theme/ from ~custom-make-theme-feature~.

Adds /theme/ to ~custom-known-themes~ and /feature/ to the ~theme-feature~ property of /theme/.
**** custom-theme-directory
Default user directory for storing custom theme files. The command ~customize-create-theme~ writes theme files into this directory. Used in ~custom-theme-load-path~.
**** custom-theme-load-path
List of directories to search for custom theme files. When loading custom themes (e.g., in ~customize-themes~ and ~load-theme~), Emacs searches for theme files in the specified order.
**** custom--inhibit-theme-enable
Whether ~custom-theme-set-\ast{}~ functions set variables immediately.
**** provide-theme
~(provide (get theme 'theme-feature))~
**** require-theme
Like ~require~ but searches ~custom-theme-load-path~ for /feature/[.el|.elc], which should have name *theme*-theme.
**** custom-safe-themes
Themes that are considered safe to load. If ~t~, all themes are treated as safe.
**** load-theme
Like ~require-theme~, loads a /theme/ file. Before this, checks file safety with ~custom-safe-themes~, disables the theme if ~custom-theme-p~ and nullifies theme properties (~theme-settings~, ~theme-feature~, and ~theme-documentation~) if reloading a theme. After loading, calls ~enable-theme~.
**** custom-available-themes
Search ~custom-theme-load-path~ for ~theme~ files and return themes available for loading. Compare to ~custom-known-themes~ and ~custom-enabled-themes~.
**** enable-theme
Used interactively, prompts the user to select a theme, which consists of any symbol with non-~nil~ ~theme-settings~ property. Checks the selection with custom-theme-p. Gets ~theme-settings~ from /theme/. Sets ~custom--inhibit-theme-enable~ to ~nil~. Loops over the elements of ~theme-settings~. Like ~custom-push-theme~, if the ~theme-value~ of a symbol is ~nil~, save the curent value to fake theme ~changed~. Update its ~theme-value~ by consing (THEME VALUE) obtained from ~theme-settings~ onto the front of the alist. If theme is not part of ~custom-enabled themes~ or ~custom-safe-themes~, calls ~custom-theme-recalc-variable~ for the symbol. Adds the theme to front of ~custom-enabled-themes~. Finally, gives the ~user~ theme highest priority by calling ~enable-theme~ with it.
**** custom-enabled-themes
List of enabled themes, ordered by precedence. Does not include the ~user~ theme. Customizing this variable calls ~enable-theme~ if ~custom-theme-p~ or ~load-theme~. Also disables unlisted themes.
**** custom-theme-enabled-p
Present in ~custom-enabled-themes~.
**** disable-theme
For enabled theme, loop over the elements in its ~theme-settings~ property. Delete (THEME VALUE) from ~theme-value~ property of each symbol. Call ~custom-theme-recalc-variable~ to reset the variable without the theme. If no other theme has a value for symbol, set ~saved-value~ to ~nil~. Removes theme from ~custom-enabled-themes~.
**** custom-variable-theme-value
Get the value of the variable from the the highest precedence theme in ~theme-value~ or nil if no custom theme specifies a value for variable.
**** custom-theme-recalc-variable /variable/
Get value using ~custom-variable-theme-value~. If /variable/ is void, set ~saved-value~ to value if non-~nil~. See ~custom-declare-variable~.

Otherwise, check whether value is nil and if so set it to ~standard-value~. If value is subsequently not ~nil~ (i.e., had a ~standard-value~ or value from ~custom-variable-theme-value~), call ~custom-set~ property or ~set-default~ with /variable/ and the result of evaluating value.
**** custom-theme-reset-variables                                 :skip:
**** custom-reset-variables                                       :skip:
*** REORGANIZE
**** Debugging customization settings
I use custom-theme-set-variables and a non-~user~ theme to set options, and setq otherwise. I use both prior to loading a package, unless I need to change an option on the fly.

setq before a package is loaded is USUALLY eqivalent to custom-set-variables, because the package will run the :set function the first time its defcustom statements are evaluated, substituting any customized or non-customized value for the default value to pass to the :set function. The one exception is if defcustom relies on ~:initialize custom-initialize-set~. After a package is loaded, however, you will need to use custom-set-variables to trigger :set again.

For barebones options--those without any keyword options--there is no difference between setq and custom-set-variables. Whether or not setting an option before or after a package is loaded are equally valid depends on the package's full code (see which-key).

If a variable or option aren't what you expect: check that the value is a permissible value for an option whose defcustom includes a :type or :option keyword, check whether you setq'd or customized before the package was loaded, check the keywords of the option's defcustom, check whether the variable or option is buffer-local, and check whether any other package or section of your config file sets or customizes the variable or option. Check the autoloads. In rare cases you may need to use ~setq~ to initialize a variable before loading a package (e.g., see org-roam). Finally, check whether the package has other options or variables that override or alter the behavior supposedly controlled by the variables or options of interest.
**** User Interface
~customize~ invokes the customization UI, where you can set the value of customizable user options. Options are also indicated in help buffers by the text "You can customize this variable." At the heart of the UI is ~custom-set-variables~, which is either written by the UI to the end of init.el or in an external ~custom-file~. An important distinction between e.g. ~setq~ and ~custom-set-variables~ is that ~setq~ sets the value of a void symbol, and ~custom-set-variables~ only sets or modifies the property-list. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Components.html#Symbol-Components][9.1 Symbol Components]]. For this reason, trying to evaluate the name of a customized option that has not yet had its associated ~defcustom~ evaluated will throw a void-variable error. If the symbol is not previously void, custom-set-variables will update its value. Otherwise, a customized option's value will be set once its associated ~defcustom~ is evaluated, usually when the package defining it is loaded.

The UI offers alternatives for setting options changed in a UI session: "Apply" and "Apply and save". The former customization is specific to the current emacs session; the latter saves the customization for future sessions. The former sets the ~customized-value~ and ~backup-value~ properties of the option symbol; the latter sets the ~saved-value~ property. Both set the ~user~ portion of the theme-value property. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Definitions.html][15.3 Defining Customization Variables (directly after Function: custom-add-frequent-value)]].
**** Example: which-key
***** TL;DR
Just using customize for options isn't always enough. Sometimes the values need to be set before a package is loaded, because the package code doesn't properly update the options for later customization.
***** Details
There is a known bug with which-key-echo-keystrokes (wkek). If it is greater than the value of which-key-idle-delay (wkid), the value of wkid seems to be ignored. The actual delay seems to be about 4x the value of wkek. The defcustom for wkek uses a default value of 1/4 of wkid's value. This value is evaluated at the time of wkek's defcustom definition, so the value of wkid needs to be set before which-key.el is loaded, in order to set wkek to a compatible value. Luckily the documentation notes that you should set this variable before loading which-key.

Test results:
1. Using (init-custom-set 'which-key-idle-delay 0.2)
   which-key-idle-delay: 1 -> 0.2
   which-key-echo-keystrokes: 0.25 (1/4 of wkid's standard value)
2. Using (setq which-key-idle-delay 0.2)
   which-key-idle-delay: 1 -> 0.2
   which-key-echo-keystrokes: 0.05 (1/4 of wkid's altered value)

Note that which-key--setup-echo-keystrokes is called to reset which-key-echo-keystrokes in response to calling which-key-mode, which-key-setup-side-window-bottom, and which-key-setup-minibuffer--none of which ensure it has the right setting based on the current setting of which-key-idle-delay.

The best option for which-key developers in the future may be to use a :set function for wkid that updates wkek when wkid changes. That way, wkid's reverse dependencies are never out of sync. Maybe even add an option to disable update of future dependencies for users who want to set those options themselves.
**** DEPRECATED: csetq
An early solution for a setter that works for both variables and options is abo abo's csetq macro, now in wide use. It checks symbols for a ~custom-set~ symbol property, invoking its value if the property is set. My issue 856 for use-package revealed that :custom failed to customize minor mode variables properly. PR 881 aimed to fix that by using custom-theme-set-variables, around which custom-set-variables is a thin wrapper.
**** References
https://www.reddit.com/r/emacs/comments/exnxha/withemacs_almost_all_you_need_to_know_about/
https://stackoverflow.com/questions/22915019/emacs-setq-before-loading
https://www.gnu.org/software/emacs/manual/html_node/emacs/Locals.html#Locals
https://www.gnu.org/software/emacs/manual/html_node/eintr/defcustom.html#defcustom
https://www.gnu.org/software/emacs/manual/html_node/elisp/Customization.html#Customization (Writing defcustoms)
https://www.reddit.com/r/emacs/comments/67pzh5/using_customsetvariables_programmatically/
https://opensource.com/article/20/3/variables-emacs
http://emacs.1067599.n8.nabble.com/which-one-to-use-custom-set-variables-customize-set-variable-or-customize-set-value-td378730.html
Top answer for https://emacs.stackexchange.com/questions/102/advantages-of-setting-variables-with-setq-instead-of-custom-el
See claim that custom-set-variables is equivalent to csetq, but also the first comment thread: https://oremacs.com/2015/01/17/setting-up-ediff/
https://www.reddit.com/r/emacs/comments/g46sg2/a_solution_to_the_agony_of_customsetvariables_and/ Ignore the article and focus on the comments. They discuss using a garbage custom file (good if you use customize-set-variable and/or custom-set-variables instead of csetq. One person also recommends using (when (featurep 'PACKAGE-autoloads) ...) in lieu of use-package's :demand, :defer, :after, etc., keywords, to detect if a package has been installed with the relevant autoloads file. This can be used if a package will be installed later, as opposed to detecting if a package has already been loaded.
** My Customization System
*** Description
Inspired by the discussion within use-package of how to implement modular customization: https://github.com/jwiegley/use-package/pull/881.
*** Interactive Usage
**** customize-package
A wrapper I wrote around custom-theme-set-variables to emulate a modular version of ~custom-file~.
**** customize-package-face
A wrapper I wrote around custom-theme-set-faces to emulate a modular version of ~custom-file~.
* straight.el
:PROPERTIES:
:ID:       F05A15AC-056A-4449-8338-95887C676AA9
:END:
** README summary
*** Description
An alternative to package.el package management with the following features:
1. Install packages from MELPA, ELPA, Emacsmirror, GitHub, manually, etc., using recipes.
2. Pre-made package recipes.
3. Edit packages by editing source code.
4. Package management commands with Magit support.
5. Lockfiles that ensure the same init file works the same way every time.
6. Optional use-package integration
*** Getting Started
Copy the bootstrap code from [[https://github.com/raxod502/straight.el#bootstrapping-straightel][Bootstrapping straight.el]], ensure early-init.el contains ~(setq package-enable-at-startup nil)~ if using Emacs 27 or higher, and remove references to package.el variables.
*** Summary
The main command provided by straight.el is ~straight-use-package~, used to install packages. Its first argument is either a quoted symbol for a package name or a package "recipe". For each package symbol, there is a default recipe that details how to install the package. Default recipes are provided by recipe repositories. See ~straight-recipe-repositories~, [[https://github.com/raxod502/straight.el#where-do-recipes-come-from][Where do recipes come from?]], [[https://github.com/raxod502/straight.el#recipe-lookup][Recipe Lookup]], and [[https://github.com/raxod502/straight.el#overriding-recipes][Overriding Recipes]]. This package maintains mirros for use with straight.el (e.g., https://github.com/emacs-straight for GNU ELPA). For custom recipe keywords and syntax, see "Recipe Format". ~straight-use-package~ calls involve three steps:

1. Recipe registration
2. Fetching the local repo
3. Building the package

Recipes specify how to fetch and build, and most of the keywords can be grouped conceptually into one or the other
steps. A subset of the package recipe keywords that relates to fetching or building is often referred to as a "fetch
recipe" or "build recipe".

Fetching and building can be circumvented through optional arguments to ~straight-use-package~.
**** Register
Registration means storing a recipe in one or more caches for future reference. The cached recipe will be used for later
operations on packages, for other packages that depend on the package specified by the recipe, and to issue warnings
about the presence of conflicting recipes for the same package (see ~straight-dependents~). Additionally, "when multiple
packages are built from the same local repository, and you have specified a custom fetch recipe for one of those
packages, straight.el can intelligently merge that fetch recipe into the automatically retrieved recipes of
dependencies, in order to avoid conflicts."
**** Fetch
Fetching in straight.el differs from the term's use in git. If a local repo is missing, straight.el clones it to a
subdirectory of ~straight-base-dir~\slash{}straight\slash{}repos. Cloning is done using ~straight-vc-clone~, which delegates to one of
the backed implementations of the ~clone~ operation. See [[https://github.com/raxod502/straight.el#git-backend][Git
Backend]] for a list of version control operations and how git implements each one. In particular, the git
implementation of ~clone~ also checks out the branch specified by the ~straight-use-package~ keyword ~:branch~, or the
commit specified in the version lockfile if available.

**Note that this definition of fetching differs from the term's use in git and in the interactive straight.el commands,
where fetching simply means updating the known state of the remote repo for e.g. later merging with the local
repo. Terminology is not carefully used in the README, since the sections on the git backend presumably use the git
definition of fetching but don't note the semantic switch.*

Local repos are canonically defined by your init file (recipes and straight configuration) and a version lockfile. To
sanity check a local repo after changing its fetch recipe (in particular the ~:branch~ or ~:repo~), see
~straight-normalize-package~. The git backend (~straight-vc-git-normalize~) ensures remotes are set correctly, that
there is no merge in progress, that the worktree has no unsaved changes, and that the primary branch is checked out.

Normalization does not check out the version from the lockfile. Lockfiles can be written and read via
~straight-freeze-versions~ and ~straight-thaw-versions~.

Multiple lockfiles are supported. See [[https://github.com/raxod502/straight.el#the-profile-system][The Profile
System]].
**** Build
Packages are defined by a local repo and /build/ recipe. The name of the package's local repo may not match the name of
the package's build folder.

If a package is unbuilt, its local repo has changed and needs to be rebuilt, or the build recipe has changed,
straight.el "builds" the package by symlinking (copying on Windows[fn:symlink]) ~.el~ files to a subdirectory of
~straight-base-dir~\slash{}straight\slash{}build. Dependencies are fetched and built. The files are byte-compiled, then the autoloads
are extracted to a file in the build directory. ~load-path~ is populated and the autoloads evaluated. The user can
~require~ or ~load~ the package, call an autoload defined in the file, or call an autoload they wrote themselves.

Dependencies are specified in the package.el format, either:
1. A ~Package-Requires~ header in ~PACKAGENAME.el~
2. An argument to ~define-package~ in ~PACKAGENAME-pkg.el~.

You can use ~rg~ to search for dependency declarations in local repos, or you can simply use straight.el's dependent and
dependency commands.

Occasionally a package does not provide an autoload that you need and generates a void-function error. You can either create an autoload, ~require~ the package, or ~load~ the pacakge. You can also use ~boundp~ and ~bound-and-true-p~ to protect against void-variable errors, or else set the varible in advance of the package loading. See [[id:881A8FD3-04A9-4DA1-86C7-14B6A360FA2A][emacs-custom]].
**** Developing Packages
When developing packages (e.g., your own fork of a popular package), simply ~find-file~ (C-h f), edit the code, and
restart Emacs. Modifications are detected by default at startup [fn:mod-on-start] on non-Windows systems. On Windows,
you might need to call the manual build commands if edits are made outside of Emacs. To change the default rebuild
check, customize ~straight-check-for-modifications~ and do so /prior to straight.el's boostrapping code/.

When the changes test fine, commit and possibly push your changes. Because the build files on ~load-path~ symlink to the
local repo, you will always edit the right files. (On Windows, straight.el advises ~find-file~ to jump to the repo files
since symlinking isn't possible by default.)
**** Recipe Format
The format for a recipe is:
#+begin_src emacs-lisp
(package-name :keyword value :keyword value ...)
#+end_src

Recipes lists are quoted when passed to ~straight-use-package~. The list's first element is a symbol naming the package,
and subsequent elements are a plist. Here is an example:
#+begin_src emacs-lisp
(straight-use-package '(el-patch :type git :host github :repo "raxod502/el-patch" :fork (:host github :repo
 "your-name/el-patch")))
 #+end_src
***** Keywords
NOTE: The classification of keywords as other, build, and fetch keywords is my own guess based on the README's
discussion of build vs. fetch recipes and specific keyword descriptions.
****** Other Keywords
******* :inherit
Overrides ~straight-allow-recipe-inheritance~. Only relevant to non-default recipes.
******* :includes
Informs straight.el that the package is a superset of other packages, meaning the others should not be "installed"
(cloned? or simply built?) again after the superset package is installed.
****** Build Keywords
******* :local-repo
The name of the local repository from which the package is built. If it does not exist, it will be cloned according to
version control settings. If not specified, defaults to a value according to version control settings or the package
name. Multiple packages may be built from the same repo, in which case they should also specify ~:files~.
******* :files
A list specifying the local repository files that need to be symlinked into the package's build directory. The default
value is ~straight-default-files-directive~.

If you simply specify a list of globs or filenames, the matches will be symlinked into the top level of the package's
build directory. Most packages take this approach.

If a list element is a list whose first element is a string, the first element represents a relative path from the
package's build directory where subsequent elements will be symlinked. org takes this approach.
#+begin_src emacs-lisp
:files (:defaults "lisp/*.el" ("etc/styles/" "etc/styles/*")))
#+end_src

See ~straight-expand-files-directive~ for a deeper explanation of list elements.
******* :flavor
Modifies the ~:files~ directive.
******* :build
Specifies post-symlink build steps. E.g., whether to compile byte code or extract autoloads. If absent,
~straight--build-default-steps~ runs.
******* :pre-build
Specifies steps to take before symlinking (and thus before ~:build~).
******* :post-build
Specifies steps to take after ~:build~.
****** Fetch Keywords
******* :source
Overrides ~straight-recipe-repositories~.
******* :type
Specifies the version-control backend to use for cloning and managing the local repository. If omitted, defaults to the
value of ~straight-default-vc~, which is ~git~ by default. The only other currently accepted value is ~built-in~, which
tells straight.el to use the Emacs-provided version of the package rather than a local repository.
******* Git Backend Keywords
******** :repo
The remote repository location. See ~:host~.
******** :host
Supports values of ~nil~, ~github~, ~gitlab~, and ~bitbucket~. If ~nil~, then ~:repo~ should be the full URL of the
remote git repository. If non-~nil~, then ~:repo~ should be a string ~"username/repo"~.
******** :branch
A string used to checkout a branch if version lockfiles do not specify a commit. This is the branch used for
normalization and interaction with the remote.
******** :remote
The name to use for the remote repo, or for the upstream repo if forked. Defaults to
~straight-vc-git-default-remote-name~, the default value of which is ~"origin"~.
******** :nonrecursive
If non-~nil~, submodules are not cloned.
******** :fork
The settings for a fork.

If ~t~ or a string is the value, it specifies ~:repo~:
- ~t~: Looks up the username in ~straight-host-usernames~ and inherits the fork's repo name from the upstream repo.
- ~\quot{}\slash{}REPO\quot{}~: A string specifying the fork's repo name prefixed by a forward slash looks up the username in ~straight-host-usernames~.
- ~\quot{}USER\quot{}~: A string specifying only the username inherits the upstream repo name.
- ~"REPO\slash{}USER"~: Used as-is.

Alternatively, it accepts a plist with keywords ~:host~, ~:repo~, ~:branch~, and ~:remote~.

To illustrate, this
#+begin_src emacs-lisp
(straight-use-package '(el-patch :fork (:repo "your-name/el-patch")))
#+end_src
is the same as
#+begin_src emacs-lisp
(straight-use-package '(el-patch :fork "your-name/el-patch"))
#+end_src
When your fork is on the same host (e.g.,
GitHub) and has the same name as the upstream repository, and if you've set ~straight-host-username~ to specify your
username for the host:
#+begin_src emacs-lisp
(straight-use-package '(el-patch :fork t))
#+end_src

The ~:remote~ keyword inside a ~:fork~ plist applies to the fork, while the outside ~:remote~ applies to the
upstream. The one inside defaults to ~straight-vc-git-default-fork-name~, which defaults to ~"fork"~.
******** :depth
Either the symbol ~full~ or an integer ~N~. Clones the entire history or with ~--depth N~. The default value when the
keyword is omitted is determined by ~straight-vc-git-default-clone-depth~, which defaults to ~full~.
******** :protocol
The protocol to use when interacting with the remote repo. Defaults to ~straight-vc-git-default-protocol~, which
defaults to ~"https"~.

See also ~straight-vc-git-force-protocol~.
**** Bug Testing
straight.el can be used to replicate bugs in other packages. See
[[https://github.com/raxod502/straight.el#using-straightel-to-reproduce-bugs][Using straight.el to reproduce bugs]].
*** Interactive Usage
Note that there is no command to commit but there is one to push changes in local repos. My guess is that commits can be handled through Magit.
**** straight-use-package /PACKAGE-OR-RECIPE &optional NO-CLONE NO-BUILD/
Temporarily install a package. For permanent installation, include a call in the init file. To filter recipes by repository, call with a prefix argument.

Pass the package name as the first argment to install the default recipe.
#+begin_src emacs-lisp
(straight-use-package 'el-patch)
#+end_src

~NO-CLONE~ generally halts processing after registration if non-~nil~. If set to the symbol ~lazy~, then it will still build and load previously cloned packages but will halt after registration for uncloned repositories.

~NO-BUILD~ halts processing after fetching. This means that the package will not be built or loaded.

These arguments also accept functions that accept packagename strings and pre-process them into return values for these arguments. For packages that should never be built, prefer ~:build nil~ in ~PACKAGE-OR-RECIPE~ to ~NO-BUILD~. See also the wrappers in [[https://github.com/raxod502/straight.el#variants-of-straight-use-package][Variants of straight-use-package]].
**** straight-get-recipe
Print and copy the chosen default recipe to the kill ring. With a prefix argument, filter by repository.
**** straight-normalize-package / straight-normalize-all
Normalize the local repository to the state represented by the init file's straight.el configuration and the package recipe. E.g., the git backend (~straight-vc-git-normalize~) ensures remotes are set correctly, that there is no merge in progress, that the worktree has no unsaved chnages, and that the primary branch is checked out.
**** straight-freeze-versions
Generate a lockfile from your current config, pushing any local changes in local repos to their remote. The default lockfile is \tilde{}\slash{}.emacs.d\slash{}straight\slash{}versions\slash{}default.el.
**** straight-thaw-versions
Install packages using the version lockfile. It first checks that there are no changes to the local repo that will be overwritten.
**** straight-fetch-package / straight-fetch-all
Fetch from the repo's main remote, or from the fork's upstream with a prefix argument.
**** straight-fetch-package-and-deps
Like ~straight-fetch-package~ but fetch for dependencies (and their dependencies) as well. With a prefix argument, fetch from the upstream for all forks.
**** straight-merge-package /straight-merge-all
Merge the repo's main remote into the local repo, or the fork's upstream with a prefix argument.
**** straight-merge-package-and-deps
Like ~straight-merge-package~ but merge for dependencies (and their dependencies) as well. With a prefix argument, merge from the upstream for all forks.
**** straight-pull-package / straight-pull-all
Combines ~straight-fetch-package~ and ~straight-merge-package~ (or ~straight-fetch-all~ and ~straight-merge-all~)
**** straight-pull-package-and-deps
Combines ~straight-fetch-package-and-deps~ and ~straight-merge-package-and-deps~
**** straight-push-package / straight-push-all
Push a local repo to its remote
**** straight-check-package /straight-check-all
Rebuild packages that have been modified. The default value on non-Windows systems of ~straight-check-for-modifications~ causes a modification check to be performed on local repos at startup and when these functions are called. On Windows, the default external tool used to detect modifications, ~find~, is unavailable, and only modifications made within Emacs are detected on save by default. These functions might not work on Windows.
**** straight-rebuild-package / straight-rebuild-all
Rebuild packages whether or not they have modifications. To also rebuild dependencies, call with a prefix.
**** straight-prune-build
Discard unregistered packages (i.e., those without associated ~straight-use-package~ calls) and clear the autoload cache (see ~straight-cache-autoloads~).
**** straight-dependents
Get a package's dependents (i.e., which packages depend on a package, or reverse dependencies)
**** straight-dependencies
Get a package's dependencies
** My FAQ
*** Using ~straight.el~ to reproduce bugs
~emacs -Q -l ~/.emacs.d/straight/repos/straight.el/bootstrap.el~
~M-x straight-use-package RET <project> RET~
*** Omitting straight-use-package calls for dependencies
A ~straight-use-package~ call for a dependency can be omitted if there is call for a dependent. The packages will be downloaded and built; however, if you remove the calls for all dependents and want to use the former dependency, you will need to insert a call for the dependency.
*** Custom recipes for package dependencies
~straight-use-package~ calls with custom recipes must occur before dependent packages to avoid recipe conflicts. E.g., counsel depends on both ivy and swiper according to ~straight-primary-dependencies~. The swiper repo is downloaded, and all three packages are built. If you would like to use a custom recipe for ivy, you would need to add it to a calls higher up than counsel's calls.
*** Is ~straight(-primary-)dependencies~ failing to report all dependencies?
The package name--presumably the CAR of a package recipe, rather than the repo or build directory names--should be checked against two files. ~PACKAGENAME.el~ may contain a ~Package-Requires~ header, or ~PACKAGENAME-pkg.el~ may contain a ~define-package~ call. If these lines are present in files whose names don't match the package, you may want to split the package into multiple recipes/packages. E.g., the ~org-dynamic-bullets~ and ~org-visual-indent~ packages are both built from the ~org-visual-outline~ repo and each contain source files of the same name with ~Package-Requires~ headers; however, the headers are missing a closing parenthesis. If you add one to each file, ~straight-(primary)-dependencies~ will work as expected, reporting a dependency on ~org~ v9.0.
*** helm-bibtex and ivy-bibtex
One soft dependency "issue" is that ~org-roam-bibtex~ depends on ~org-ref~, which depends on ~helm-bibtex~. ~straight.el~ splits the ~helm-bibtex~ repo into two recipes: ~helm-bibtex~ and ~ivy-bibtex~. Only the former is treated as a dependency, so ~ivy-bibtex~ has to be explicitly specified for it to be built. I am not entirely sure ~org-ref~ uses the command ~ivy-bibtex~ if you search its source code. Also per [[https://github.com/jkitchin/org-ref/issues/793#issuecomment-693367854][this issue]]. So I guess it turns out not to be an issue. But it does point to the fact that recipes should be carefully designed. If for some reason ~org-ref~ did depend on the ~ivy-bibtex~ command, splitting ~helm-bibtex~ repo into two packages but resolving dependencies based on a ~Package-Requires~ header that assumed all files would be present, would be problematic.

** Footnotes
[fn:symlink]: See [[https://github.com/raxod502/straight.el#symbolic-links][Symbolic Links]].

[fn:mod-on-start]: [[https://github.com/raxod502/straight.el#how-does-straightel-know-when-to-rebuild-packages][One section]] of the README states, "When you request for straight.el to load a package (using straight-use-package), it first checks if the package needs to be rebuilt.... This check occurs during Emacs init, when your init-file makes calls to straight-use-package. You may notice a significant delay on the first straight-use-package call, because this is when straight.el performs a bulk find(1) call and caches the results for later usage." [[https://github.com/raxod502/straight.el#customizing-when-packages-are-built][Another section]] states, "By default, when straight.el is bootstrapped during Emacs init, it uses a bulk find(1) command to identify files that were changed since the last time a package depending on them was built. These packages are then rebuilt when they are requested via straight-use-package." Thus, we have two different descriptions of when the check happens: the bootstrap code and the first call to ~straight-use-package~.
* general
:PROPERTIES:
:ID:       0C497F47-44BB-4767-AA51-83F81CC80EE7
:END:
** Summary
This package should be declared early so that other code blocks can use provided functions. The ~:general~ keyword for use-package will not be available until _after_ the use-package for general has executed, so any general-ized key bindings within it are placed in ~:config~ instead.

general.el provides ~general-define-key~, ~general-def~, ~general-create-definer~ and the ~:general~ keyword for ~use-package~.

~:wk-full-keys nil~ should be specified within a prefix map such as ~help-map~ when binding keys, including other prefix maps or commands, that include ~:which-key~ (~:wk~ for short).

#+begin_src emacs-lisp
(general-define-key
 :keymaps 'help-map
 :wk-full-keys nil
 "A" '(:prefix-command apropos-prefix-map :which-key "apropos"))

(general-define-key
 :keymaps 'help-map
 :wk-full-keys nil
 :prefix "A"
 :prefix-command 'apropos-prefix-map
 "" '(:ignore t :which-key "apropos"))
#+end_src

~:general~ is followed by one or more lists containing arguments for ~general-def~. It also accepts full general commands. Note the use of ~:no-autoload t~. ~:general~ creates autoloads for the bindings, so it needs to be disabled for non-autoloadable prefix commands. Or set ~general-use-package-emit-autoloads~ to ~nil~ and manually specify autoloads as needed.

#+begin_src emacs-lisp
:general
(my-leader :keymaps 'snippet-mode-map "m" 'my/snippet-mode-map :no-autoload t)
(:keymaps 'my/snippet-mode-map
          "l" 'yas-load-snippet-buffer
          "c" 'yas-load-snippet-buffer-and-close
          "t" 'yas-tryout-snippet)
#+end_src
** References
1. https://github.com/noctuid/general.el
2. [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][https://www.gnu.org/software/emacs/ma...]]
3. https://www.masteringemacs.org/article/mastering-key-bindings-emacs
4. https://www.emacswiki.org/emacs/CategoryKeys
* server
:PROPERTIES:
:ID:       F78A64EE-772D-4825-A995-43B8B297530D
:END:
** server start
~server-start~ allows a server to be started with a simple call to the ~emacs~ binary. I prefer the ~e~ alias, which debugs if necessary and frees the terminal. The sever is supposed to die after the last frame is killed. The ~emacsclient~ binary can be used as the value of ~$EDITOR~ by external programs to open files in the running instance. [[https://github.com/jkroes/home_bin/blob/master/emacs-same-frame][emacs-same-frame]] wraps emacsclient to launch a server if no server is running, create a frame if no frame exists, or open a file in the current frame. Set the EDITOR shell variable to the script. I had issues completing commit messages with graphical Emacs, so I altered GIT_EDITOR to use terminal-based Emacs.
** server shutdown
*** TODO Why doesn't the server always stop if it's supposed to die with the last frame when using ~server-start~?
One reason may be use of emacsclient. [[https://stackoverflow.com/questions/19069612/how-to-close-a-emacsclient-gui-frame-without-killing-the-server][One answer]] suggests that emacsclient with ~--alternate-editor=""~ starts the daemon. To test this, you must remove the call to ~server-force-delete~ above, or avoid using ~server-shutdown~ (C-q). From testing, ~e~ can cause this. If you open two instances via ~e~, the second one will report this issue.

Also more obviously, every time I run e, it spawns a new instance of Emacs that tries to start its own server. It no longer throws an error as expected.
** server focus frames
Testing revealed that if the server is running but no frames exist, creating a new frame by running emacsclient does not focus the frame. This may depend on the Emacs distribution. The code below focuses the new frame in this instance--and all others--where a frame is created. Emacs is also focused when it first launches.
* OS-specific Settings
:PROPERTIES:
:ID:       2F40BEC7-1ED7-481D-88D9-6E59E9B7B4D2
:END:
* line wrap
:PROPERTIES:
:ID:       671701F7-7129-496E-B504-0E54E04D8762
:END:
The four types of wrapping behavior in emacs are:

1. Default behavior of soft wrapping and word-splitting at the right window edge.
2. visual-line-mode soft wraps at right window edge and avoids word splitting.
3. auto-fill-mode hard wraps at fill-column, which can be displayed via display-fill-column-indicator-mode.
4. toggle-truncate-lines truncates lines instead of wrapping.

Some Rmd export formats such as Word soft-wrap paragraphs, so text lines should not be hard-wrapped.

* hydra
:PROPERTIES:
:ID:       0C1B6E67-E025-4B01-AEF0-A7CD6051A9BD
:END:
** Notes
To enable which-key paging, hydras must be pink. Otherwise you can still page to find what you want, but this will exit the hydra. You will have to reenter all prefix keys again to reach the desired binding.
** Tasks
*** DONE Rewrite my/defhydra so that you don't have to use with-eval-after-load
CLOSED: [2021-08-02 Mon 20:44]
I simply moved hydra lower down in the config, which seems to work for now
*** TODO Add an action to counsel-fzf and other file commands to open files as read-only buffers
This will help avoid accidentally altering files you simply want to read.
*** TODO Make sure every hydra head is an autoload in each hydra
*** TODO Make hydra-ivy work with my/defhydra
More generally, figure out how to accept hydras of different structures. Neither my/defhydra nor my/defhydra2 work for hydra-ivy, so clearly something is going on to allow all these different structures.
Alternatively, redefine the hydras yourself to get the desired structure.
* ivy / counsel / swiper
:PROPERTIES:
:ID:       D8F93849-CE72-4F58-AFBF-FA5224A0F1F2
:END:
** TODO Alternate completion packages
*** embark
https://karthinks.com/software/fifteen-ways-to-use-embark/
*** vertico
*** helm
*** selectrum
*** ido
* org
:PROPERTIES:
:ID:       7BD62B3E-5DC9-4186-A8F8-8BE13F43F6DB
:END:
The default package for org might fail with a git redirect error. I changed the repo to refer to the github mirror.
** TODO Align text in multiline plain lists in org
Currently org-indent-mode and visual-line-mode don't seem capable of doing this. The text wraps flush with the list number rather than with the text on the first line.

Another user identified [[https://github.com/jrblevin/markdown-mode/issues/330][this issue]].
** TODO Modify my/org-open-at-point-* to open certain filetype attachments outside of emacs
What is the behavior of org-open-at-point? See org-file-apps
** TODO org-indent-line sometimes incorrectly indents e.g. ~#+END_SRC~
But not always. It only happens with certain src blocks.
Probably also affects org-return
** TODO When a src buffer is open for editing, collapse its block in the org file to avoid clicking on it by accident and spawning two windows displaying the same src buffer.
Also it's not very interesting to see the src code in the original org file while editing it in another window.
** Notes
*** Random Notes
SPC m a F over heading opens attached dir in dired
When the file is copied, where is it stored? Is it better to use a link instead
to an unstructure org directory where all org files live? Also, wouldn't a link
show changes to the original file in real time? I can't edit stashed attachment
files as part of a project. Perhaps this would work better for linking to org
files?  See also spc m f. I think it shows you location if you're hovered over
an attachedfile.
Also M-x orgattachdir and check out the commands that show up.
Also investigate spc m a z for synchronization with attachment dirs. What does
this synchronize?
org-attach-directory
Check out sorce code for org-attach:
http://web.mit.edu/Emacs/source/emacs/lisp/org/org-attach.el
This solution looks interesting:
https://emacs.stackexchange.com/questions/26412/human-readable-directory-tree-with-org-attach
See org-manage and ScriptDevil/org-fstree https://blog.modelworks.ch/using-org-mode-to-keep-track-of-your-project-files/
org-git-link:
https://orgmode.org/worg/org-contrib/org-git-link.html
https://orgmode.org/worg/org-tutorials/org-vcs.html
**** org-sparse-tree / org-occur
This command will narrow the buffer to matching results and context defined by org-show-context-detail; however, it never hides level-1 headings. One solution is to use a dummy "root" heading to nest all other headings underneath.
*** Tags
Note that the tag syntax only allows for alphanumeric characters, '_', and '@'.

To search the cheatsheet, use ~org-tags-view~.

To add a tag, use ~counsel-org-tag~ or ~org-set-tags-command~.

Tag completion is available with point following the cursor and M-TAB. Setting the TAGS keyword with one or more tags that are assigned unique letters enables fast tag selection, which has shortcuts for completion and displays inherited, current, and valid (i.e., not mutually exclusive with inherited or current) tags. Shortcuts are described in https://orgmode.org/manual/Setting-Tags.html#FOOT54. See also ~org-fast-tag-selection-single-key~.

The distance of tags from heading text is controlled by ~org-tags-column~. This variable only affects new tags, but M-: ~org-set-tags-command~ can properly space tags in the current buffer when used with C-u.

Inheritance ensures that tags are inherited by child headings. To configure inheritance, configure ~org-use-tag-inheritance~ and ~org-agenda-use-tag-inheritance~. See also group tags for setting group heriarchy: https://orgmode.org/manual/Tag-Hierarchy.html.

Categories are displayed on the left (with configurable icons) of ~org-tags-view~ and other agenda views. You can filter by the category under cursor with '<'. By default, the filename is used as a category. org-roam filenames are a mess due to timestamps, so it is useful to assign a category to a file even if it matches the title. Alternatively, ~org-agenda-category-icon-alist~ accepts a regex match for category and so can be used to match org-roam filenames; however, the filename with its messy timestamp will still be displayed. This is only desirable if you multiple files with similar non-timestamped portions of a filename.
** Tasks
*** TODO org-attach notes - I was using it wrong
ID property: For each file, a data/ folder is created. For each node with attachments, a folder named after the ID is created. This is the default, and the data and ID dirs will be created automatically when adding attachment files.

DIR property: Manually specify the path to an attachment directory. Relies on ~org-attach-set-directory~ and ~org-attach-unset-directory~.
org-attach assigns a directory to nodes. Must be used before attaching files to avoid the default ID-based behavior. Paths to the attachment directory can be relative to the file in which the node lives, or absolute (see ~org-attach-dir-relative~).

Attachment files/folders can be moved, linked (not always hardlinked), or copied into the attachment directory.

Attached files and folders can be referenced with attachment links. These amount to links relative to the attachment directory (e.g., just the name of a file directly underneath the attachment folder or the relative path to files within subdirs).
*** TODO Make org-mode and evil play nicely
Consider adding one of the packages here: https://www.reddit.com/r/emacs/comments/67rgxg/questions_about_evil_org_mode/.
*** TODO Convert evil-define-key to a general statement
See comments above code. My gut feeling is evil has some sort of buffer-local setting that general isn't overriding normally.
*** TODO Add entries for every block in the manual to the structure template list (SPC-m ,)
*** TODO Earlier list of todos and notes (reorganize)
TODO: Investigate later:
sparse trees (e.g., to hide finished tasks)
drawers
blocks
links
todo subsequences
habits
priorities
cookies [%]
tags
properties
column view
details for dates and times, including clocking
refile, archive, capture refile and templates
working with attachments
agenda onward
diary

TODO:
Find command to add repeating timers rather than editing manually
Make RET convert plain text under cursor or selected to link. Currenlty it
only follows existing links, so one-half vimwiki functionality
Bind the following:
org-set-property-and-value: sets property block
org-delete-property
C-u c-u c-u c-t: change todo state, regardless of state blocking (like
ordered property)
org-check-deadlines (c-c / d): show past-due or do within
     org-deadline-warning-days Reminders can be appended; e.g., <2004-02-29
     -5d> uses a 5-day advance notice Positives (+5m) indicate repeaters
     (repeating tasks). These must come before reminders.
org-check-before-date (c-c / b): checks deadliens and scheduled items before
date
org-check-after-date (c-c / a)
https://www.spacemacs.org/layers/+emacs/org/README.html

For org-mode-map:

Existing bindings that I didn't change:
C-c ' (org-edit-src-code and org-edit-src-exit)
tab (org-cycle)
S-tab (global-org-cycle)

Stucture (list/heading) editing
org-meta-return (m-ret): insert heading or item at current level
org-insert-heading
org-insert-heading-respect-content (c-ret): Insert heading at end of subtree. Similar to C-u M-ret.
Is there a function for C-u C-u M-ret???
org-insert-heading-after-current
org-insert-todo-heading (m-s-ret): insert todo heading or checkbox item
org-insert-todo-heading-respect-content (c-s-ret): Insert todo heading at end of subtree
org-insert-subheading: Insert subheading
org-insert-todo-subheading

org-edit-src-save
*** TODO Figure out attachments and links, so you can navigate by ret and del, so you can use c-\ to open treemacs, select a parent org file, then quickly navigate down its links/attachments using del and ret in normal mode.
** [[https://orgmode.org/worg/index.html][References]]
*** [[https://orgmode.org/][Home page]]
*** [[https://orgmode.org/org.html][Manual]]
*** [[https://orgmode.org/worg/org-tutorials/index.html][Tutorials]]
**** [[https://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][David O'Toole]]
Scheduling tasks and using the agenda.
*** https://alphaalgorithms.github.io/2019/06/13/work-with-source-code/
* org-visual-outline
:PROPERTIES:
:ID:       188A839E-ABAF-4BFC-968D-DC4091FBDDCC
:END:
Provides indentation guides between headings of the same level and dynamic bullets.
* org-contrib
:PROPERTIES:
:ID:       43396D86-EA1A-4EBB-882C-CCBCFDE5751E
:END:
** org-eldoc
:PROPERTIES:
:ID:       DB7A711C-4028-4BC7-9A90-12B5C98A60CD
:END:
Display org header and src block info using eldoc
*** TODO Enable org-eldoc display with idle when not on a headline
Consider how to do so without interfering with other eldoc messages.
* org-roam
:PROPERTIES:
:ID:       0779654F-2F87-49DE-AB0A-A279324637FC
:END:
** Links
*** [[~/.emacs.d/straight/repos/org-roam/doc/org-roam.org][Manual]]
*** [[https://org-roam.discourse.group/][Discourse]]
*** [[https://github.com/org-roam/org-roam/blob/master/CHANGELOG.md][Changelog]]
*** [[https://github.com/org-roam/org-roam/releases][Releases]]
*** Companion Packages
**** org-roam-ui
**** [[id:2BA96DDA-07A2-4F20-91F4-F1A3D3FEE129][Org-Roam-Bibtex]]

** Notes
org-roam v2 is now the actively developed branch

The manual only applies to v1 and should not be relied on anymore. Instead, see the release history (linked to in the file-level ~ROAM_REF~ property.

The release history for v2.0.0a1 notes that v2 is the active development branch for org-roam. It links to a wiki on how to use v2 and what breaking changes were made, a discourse thread, and a migration script for converting from earlier versions.

v2 assigns IDs to all nodes. Nodes are "top-level" files and org headlines with an ID. This was made possible by org-mode v9.4, which [[https://orgmode.org/Changes.html#orgdd3d5c7][allows property drawers before the first headline in a file.]]

v2 keeps the concept of file titles, tags, and refs from earlier versions. IDs, aliases, and refs are implemented within property drawers either before the first heading (top of the file) or below the heading the drawer belongs to. Refs were previously implemented as ~#+roam_key~, but now uses the drawer property ~:roam_refs:~, and can apparently accommodate multiple refs! Roam has removed the ~#+roam_tags~ property in favor of ~#+filetags~ and org tags. Title and filetags are implemented as properties outside of this drawer (because they can only ever be file-level properties). Org tags attached to headings are placed to the right of headings.

Previous versions relied on ~org-roam-insert~ to insert file links to org-roam files, and ~org-store-link~ + ~org-insert-link~ + ~org-id-link-to-org-use-id~ to insert ID-based links to headings. Now that headings and files are considered nodes, a single command is used for insertion: ~org-roam-node-insert~. For creating and storing ID-based links to headings, you still need to use ~org-store-link~ with ~org-id-link-to-org-use-id~ set to ~'create-if-interactive~. If you need to disable this option (see its comment for issues), use ~org-id-get-create~ instead of ~org-store-link~.

The concept of the index file seems to be obsolete, though I will retain my own index file.

Extensions to org-roam like org-roam-bibtex and org-roam-server are not automatically compatible. org-roam-bibtex is actively developing v0.6 to transition to support for org-roam v2.

There are customizable options for org-roam v2; however, the customization UI
doesn't seem to work with them.

There no longer seems to be an option to set the idle delay for updating the roam database, but you can still manually update via ~org-roam-db-sync~ if needed. It may be that I am supposed to do additional configuration to make sync more reliable; however, I didn't find advice on how to do this.

Other points of dicussion and tips are available at [[https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2][the Hitchhiker's Guide]] (linked to in the release history for v2.0.0a1).

*!!!Note that most of v2 is still undocumented, including commands and options, and things may break*.
** Usage
*** Notes
**** ~org-roam-node-find~
Find a node or create a file node. Files are named after their ~#+title~ at creation time. For files, a temporary org-capture buffer is opened. The top of the capture buffer lists keybindings. After saving the new note, a non-capture buffer will display the new file.
**** ~org-roam-capture~
Open a capture buffer for a new or existing file node. Unlike ~org-roam-node-find~, you will remain in the current buffer.
**** ~org-id-get-create~ / ~org-store-link~
Create an ID for a heading, so it can be used as an org-roam node.
**** ~org-roam-node-insert~
Insert a link to a node. Note that only headlines with ID properties are available for linking.
**** ~org-roam-buffer-toggle~
Open the org-roam buffer (showing backlinks and unlinked references) in a split window. The window behavior can be configured.
**** ~org-roam-db-sync~
Manually update the org-roam database if changes to nodes don't appear automatically.
**** ~org-roam-tag-add~
Before the first headline, add a tag to ~#+filetags~. Within a tree, add an org tag to the nearest node (i.e, an ancestral heading with an ID) if one exists or else to ~#+filetags~.
**** ~org-roam-ref-add~
Add a ref to ~:roam_refs:~ of the nearest node (either the file or an ancestral heading with an ID).
**** ~org-roam-alias-add~
Add an alias to ~roam_aliases:~ of the nearest node (either the file or an ancestral heading with an ID).
*** Daily notes
**** ~org-roam-dailies-find-today~
Find the daily note, create it if necessary.
**** ~org-roam-dailies-find-date~
Generalized form of ~org-roam-dailies-find-today~.
**** ~org-roam-dailies-capture-today~
Capture an entry in the daily note (within ~org-roam-dailies-directory~) for today.
**** ~org-roam-dailies-capture-date~
Generalized form of ~org-roam-dailies-capture-today~.
*** Fleeting notes
**** ~org-capture~
Provided by org-mode. Recommended by org-roam (pre-v2) for so-called _fleeting notes_ that aren't permanent enough to store in ~org-roam-directory~. These are intended to be processed later when you have the time.
*** Etc.
**** ~org-roam-diagnostics~
**** ~org-roam-version~
*** Concepts
**** File Titles or Heading Text, and Aliases
The title property of the file and the text of heading nodes are the default description when inserting links to nodes. Aliases are used as alternative link descriptions for nodes.

Pre-v2, both the title and alias properties were used to construct a file node's actual title, and the title was linked to and updated with the filename by default. The title seems to be used to create filename at the time of file creation, but v2 does not subsequently update the filename if the title (property) is changed.
**** Tags
Used for creating taxonomical hierarchies of files, and as filter by org-roam and org-agenda.
**** Refs
The rationale for file refs is that it allows backlinks to so-called _literature notes_ summarizing a single source, such as an article or website, without having to insert a link to the literature note. This file is itself a literature note. From the literature note, you can view all citations in the backlinks buffer.
**** org-id.el
IDs are provided by org-id.el, but users of org-roam will rarely need to think about org-id. In fact, org-roam seems to work without ~org-id-locations-file~, since it has its own database.

org-id.el allows for the association of entries (headings) in org files with unique alphanumeric IDs. ~org-id-link-to-org-use-id~ can cause ~org-store-link~ to create an ID for a heading you are storing a link for. When you insert the link, the ID is inserted as the link. When the link is clicked, the ID is looked up in ~org-id-locations-file~, which maps each ID to the file containing the entry with that ID. The association between files and their IDs can become outdated if e.g. you rename files. To update the association after changes, run ~org-id-update-id-locations~. It will rescan a list of know files (and those you specify in ~org-id-extra-files~) to rebuild the association. In other words, for all ID links to work even after file renaming, you need to make sure your files live in known or extra locations you specify, and you need to occasionally run the updater function to account for these changes. See https://stackoverflow.com/questions/27132422/reference-unique-id-across-emacs-org-mode-files and https://emacs.stackexchange.com/questions/51755/org-mode-link-files-with-ids-and-not-filenames.
** Tasks
*** Manual
**** TODO Read section 10.1
Types of completion offered by org-roam, including examples
***** TODO Fix org-roam completion
The manual advises prepending company-capf to company-backends; however, because other files can alter company-backends there is no guarantee that company-capf will remain the first element. I am not sure how important it is that it be the first element. My failed attempt at this:

~(add-hook 'org-mode-hook (lambda () (add-to-list 'company-backends 'company-capf)))~

A separate issue is that TAB cycles, and so cannot be used for completion-at-point or company-based completion. Another binding is needed.
**** TODO Read section 15
org-roam protocols
**** TODO Read section 20 onward
In particular, check out Org-noter for displaying and annotating PDFs, and org-roam-bibtex. Also checkout org-roam-sever. These packages need to be updated to handle v2 of org-roam.
**** TODO Search for user-contributed org-roam templates
See org-roam-\*-templates, supplemented by possibly outdated sectoin 7 of the manual. (Other sections also dealt with the different templates.)
*** TODO Add bindings for commands in [[id:D11E9F90-4348-40DF-A12E-87A4E766CCBB][Usage]]
*** TODO Integrate org-roam with org-agenda
*** pre-v2 (deprecated)                                         :ARCHIVE:
**** Concepts
***** How org-roam uses IDs
org-roam uses file links for files and ID links for headings (via org-id, per the changelog). File links are added via ~org-roam-insert~, and heading links are added via ~org-store-link~. If you alter the title property of a file, both the filename and links to the file itself will be updated after ~org-roam-update-db-idle-seconds~. Note that this does not automatically track moved files. This is a disadvantage over org-id.el. There is an open [[https://github.com/org-roam/org-roam/issues/1091][issue]] to try and add support for file-specific IDs not tied to a headline (as is required by org-id.el).
***** File titles
Used to find files. The title is customized by ~org-roam-title-sources~. The default title consists of the values of the ~#+title~ and ~#+roam_alias~ properties, or the topmost headline and ~#+roam_alias~ property's value if ~#+title~ is missing, or filename if there are none of the above.
***** File tags
Additional categorization beyond titles. Determined by ~org-roam-tag-sources~, which by default uses only ~#+roam_tags~. It can additionally use org-mode tags and subdirectories of ~org-roam-directory~.
**** Issues
~org-roam-directory~ must be set in advance of calling ~org-roam-mode~, per the manual and my own testing. Moreover, ~setq~ must be used in lieu of ~customize-package~ since the latter does not immediately initialize options and since the file that defines the option--at which point it are set to the value specified in ~customize-package~--is loaded after ~org-roam-mode~ is called.
**** Dependencies
As hinted at above, org-roam options are void immediately after ~(straight-use-package 'org-roam)~. After calling ~org-roam-mode~, options become available. The reason appears to be that org-roam's autoload file defines an autoload such that calling ~org-roam-mode~ loads org-roam.el, where the variables are loaded. (I was not able to discern how this process required ~org-roam-directory~, though I didn't read the source carefully.)
Ensure these are installed in ~/.emacs.d/straight/repos.
***** dash
***** f.el
***** s.el
***** org
***** emacsql
***** emacsql-sqlite3
Ensure that sqlite3 is on ~exec-path~ by checking the results of ~(executable-find "sqlite3")~. On MacOS if Emacs is launched from the terminal, the executable is found at ~/usr/bin/sqlite3~. Otherwise, add to your init.el: ~(add-to-list 'exec-path "path/to/sqlite3")~.

* org-roam-bibtex
:PROPERTIES:
:ID:       982956E0-DA20-49C6-9128-BE51156950AE
:END:

See the [[~/.emacs.d/straight/repos/org-roam-bibtex/doc/orb-manual.org][manual]].
** TODO org-ref may become deprecated. org-mode has just introduced a native (undocumented) citation syntax.
* COMMENT zotxt
Unlike e.g. zotero-find, this works when Zotero is running. In fact, it requires a running instance to act as a server. It can insert zotero select links in the org-mode format (~org-zotxt-insert-reference-link~) or citation keys (~zotxt-citekey-insert~). There is optional integration for Pandoc. It can open the link (~org-zotxt-open-attachment~). It can use a citekey at point in Emacs to show where the item is in Zotero (~zotxt-citekey-select-item-at-point~). It can updae link(s) at point or in the entire document (~zotxt-update-~...). Finally, ~org-zotxt-noter~ will either open the org-noter interface or prompt for a Zotero search to load an attachment that can be annotated using org-noter, based on whether or not the document-path property on a heading is set.

#+begin_src emacs-lisp
;; Requires the Zotero add-on:
;; https://github.com/egh/zotxt

;; The default recipe is for GitLab, which seems to be way behind GitHub repo
(straight-use-package
 '(zotxt :host github :repo "egh/zotxt-emacs"))

(add-hook 'org-mode-hook 'org-zotxt-mode)
(add-hook 'org-mode-hook 'zotxt-citekey-mode)

;; Otherwise, org-zotxt-noter command is unavailable
(require 'org-zotxt-noter)
#+end_src
** TODO Integration with org-roam-bibtex
*** TODO Modify zotxt-citekey-select-item-at-point to use the value of the roam_refs property in org-roam-bibtex notes
This is the citekey prefixed by "cite:". This function only recognizes markdown-style ("@"-prefixed) cite keys.
** TODO Replacement for org-roam-bibtex with org-noter integration.
This would be ambitious. orb provides several important features:
1. Extension of org-roam-capture-templates via pre-processing
2. Insertion of links to orb notes
3. Ability to open bibliography item URLs (orb-note-actions).
4. Creation of new (non-noter) notes (ivy-bibtex).

In short, zotxt is only useful for generating links to attached PDFs and citation keys, or creating org-noter notes.
*** TODO Needs a command to open URLs, not just PDFs, similar to orb-note-actions
* pdf-tools
:PROPERTIES:
:ID:       267AE1FA-A22C-4AF8-B116-D0B55E89BAE7
:END:
** TODO evilify pdf-occur-buffer-mode-map
** TODO Enable right-click for context menu within document
See pdf-misc-menu-bar-minor-mode.
** TODO Watch this video
https://www.youtube.com/watch?v=LFO2UbzbZhA
** pdf-view-mode-map
:PROPERTIES:
:ID:       4DF6E325-6774-4B26-908D-8B60B1FCAD9F
:END:
Override major mode bindings. Remapped subset that also specifies which commands from image-mode-map are included rather than inheriting from that keymap. isearch commands from global map are given evil bindings. Since it derives from special-mode,it inherits some bindings (q for quit-window) not listed here. Presumably for special modes, self-insert-command bindings (typically from current-global-map) will report as undefined. Finally, a number of minor modes provide additioanl bindings through their own maps:
1. pdf-outline-minor-mode-map
   A. pdf-outline ("o")
2. pdf-links-minor-mode
   A. pdf-links-isearch-link (f): used to search for links, which can be selected with keys (mouse doesn't select)
   B. pdf-links-action-perform (F): follows links by typing popup letters
*** TODO evilify isearch (see evil-collection) and pdf-isearch-active-mode-map bindings
*** TODO Evil mapping for pdf-occur (currently M-s o) and pdf-help
This lists lines matching a search, and RET jumps to the line
** pdf-outline-buffer-mode-map
:PROPERTIES:
:ID:       6A66720C-7E6F-4FB7-8109-9D7031A41927
:END:
*** TODO pdf-outline-buffer-mode-map bindings
I removed outline-related bindings because I have yet to see a PDF with a multilevel outline. If you need to add the commands back and set your own evilified bindings, see the bindings in https://github.com/syl20bnr/spacemacs/blob/develop/layers/%2Breaders/pdf/packages.el.
** pdf-tools-display-buffer-alist
:PROPERTIES:
:ID:       94FB1BA2-4C7B-4A25-B223-3B10751AC2BD
:END:
*** TODO Outline buffers should be auto-killed when the PDFs are killed
**** TODO How does pdf-outline-quit differ from quit-window and pdf-outline-quit-and-kill?
* COMMENT org-(noter-)pdftools
#+begin_src emacs-lisp
;; Depends on org, org-noter, pdf-tools, and org-pdftools
(straight-use-package 'org-noter-pdftools)

;;; org-pdftools
(add-hook 'org-mode 'org-pdftools-setup-link)

;; entrypoint to org-noter.el is `org-noter'
(with-eval-after-load "org-roam"
  (setq org-noter-notes-search-path
        (list (expand-file-name "org-noter" org-roam-directory))))

(with-eval-after-load "org-noter"
  ;; no autoloaded entrypoints
  (require 'org-noter-pdftools))

;; From the README. Not sure what it does.
(with-eval-after-load "org-noter-pdftools"
  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))

  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions
              #'org-noter-pdftools-jump-to-note)))

;; Enable saving PDF with org-noter highlights. See:
;; https://github.com/fuxialexander/org-pdftools/issues/68
;; https://github.com/vedang/pdf-tools/issues/28 (referenced by issue 68)
(add-hook 'pdf-view-mode-hook #'pdf-annot-minor-mode)
(add-hook 'pdf-view-mode-hook (lambda () (read-only-mode 0)))
(defun save-noter-annotations (old-func &rest args)
  (with-selected-window (org-noter--get-doc-window)
    (save-buffer)
    (funcall old-func org-noter--session)))
(advice-add 'org-noter-kill-session :around 'save-noter-annotations)

(general-def :keymaps 'my/org-roam-map
  "n" 'org-noter)

(general-def :keymaps 'org-noter-notes-mode-map
  ;; Kill the session from the notes buffer as well as the doc buffer
  "q" 'org-noter-kill-session)

;; The same bindings are present in org-noter-notes-mode-map and
;; org-noter-doc-mode-map, except in the latter "i" inserts a note heading with
;; the selected text and its location and "TAB" inserts a (default blank)
;; heading linked only to the page. Both maps provide commands to sync the notes
;; and doc buffers.  The doc buffer also has the pdftools/pdfview bindings.
;; There doesn't seem to be a difference between org-noter-insert-note,
;; org-noter-insert-precise-note, and the org-pdftools README's
;; org-noter-pdftools-insert-precise-note. This may be because the README
;; contains a typo/bug per the answer at https://emacs.stackexchange.com/questions/68013/org-link-to-the-exact-page-position-in-a-pdf-file.
#+end_src
** DONE What is the purpose of [[file:straight/repos/org-noter/other/org-noter-integration.el::require 'org-noter][org-noter's pdftools integration file?]]
CLOSED: [2021-10-13 Wed 17:36]
Per [[id:DFA66C0E-51F0-4299-9E92-B441C1BBC428][Integration with ~org-noter~]] in org-pdftools, "you can use vanilla org-noter now." This is gibberish for a newcomer, but might indicate that the integration file provided by org-noter is no longer needed due to integration within the org-pdftools package.
** TODO modify org-ref hydras.
Doesn't display properly in which-key yet when you hit RET over a citation link
** TODO Make property drawers invisible (mainly for org-noter)?
** TODO notes in org tree may render on the wrong line until org-global-cycle after exiting a noter session
Headings may run up into other lines. Could be an issue with org-visual-outline, since it is purely a rendering issue rather than a text location issue.

** TODO Create a toggle for window layout of org-noter
When a PDF has multiple columns, it may be better to split vertically.
** TODO Add SPC-m bindings based on the the notes and doc mode maps
** TODO Add the ability to grab images and embed them into notes doc
E.g., https://github.com/weirdNox/org-noter/issues/81
* helpful
:PROPERTIES:
:ID:       9769CB84-4C08-4F7F-B467-72C132715DE6
:END:
** TODO Properly open helpful windows
Reuse windows with existing buffers, split if a single window, otherwise use a non-selected buffer. Currently it does not split a single window. display-buffer-use-least-recent-window isn't available on Emacs 27.
** TODO Configure evil for helpful buffers
Bindings to e.g. helpful-visit-reference are shadowed. Opens in normal mode. Should possibly be motion?
** TODO Closing helpful windows
Automatically close if not following a link to another helpful buffer? Or find a way to sort buffers similar to bufler
* rainbow-mode
:PROPERTIES:
:ID:       0EFCD424-91C7-4090-93C7-50313BF9B858
:END:
Display color hex codes with their color as a background. Note that zenburn extends rainbow-mode to also highlight zenburn-provided colors. Since new colors can't be defined, zenburn defines colors as an alist whose key is a string naming the color and whose value is a hex code string.
* themes
** zenburn-theme
:PROPERTIES:
:ID:       F97B3F9C-BC29-4E1F-A4E3-3ED53D73D96F
:END:
Since zenburn-theme.el calls custom-theme-set-faces when setting named faces to the colors it defines, any tweaks to those faces must come after loading the theme. If using the zenburn color names, you need to use the macro zenburn-with-color-variables around calls to custom-theme-set-faces (see zenburn-theme.el for an example).

ivy-prescient-retain-classic-highlighting documents how ivy-prescient.el uses the following faces. The entire match is highlighted with ivy-minibuffer-match-face-1, while *-2 through *-4 highlight initials within an initialism. But themes like zenburn actually set the value of these faces. In this case, several ugly zenburn-green background shades. I change the backgrounds to foregrounds that work with the zenburn-bg-1 background of ivy-minibuffer-match-1 and the zenburn-yellow text of ivy-current-match. Type "ffap" to see the effect.
* command-log
:PROPERTIES:
:ID:       DBA94FFD-621F-45C8-BEEB-AACCA99D290D
:END:
** TODO Make cl buffer a narrow horizontal split; decrease font size
* page-break-lines
:PROPERTIES:
:ID:       0B2ABECF-47E4-4D9B-9D7C-85FFB6E8F4CF
:END:
Replaces form feed ("^L") with horizontal rule. See http://ergoemacs.org/emacs/modernization_formfeed
* ranger
:PROPERTIES:
:ID:       82CE5DFA-CF66-40A2-B89B-2A58255C49B2
:END:
This package is not properly documented. See e.g. ranger-show-hidden. zh does not work as expected out of the box, because the README does not document the correct values used to initialize the variable. Without one of the proper constants, the function fails to change the value to a different constant when toggling dotfile visibility. It also has three modes of visibility instead of ranger's two.
* evil
:PROPERTIES:
:ID:       17BB0430-2955-4051-A0F7-C141B1AEFD5C
:END:
** Notes
*** Keys
A prefix key is a key bound to a keymap or to a symbol whose function definition is a keymap. The latter is a way to name prefix keys. ~define-prefix-command~ creates a keymap and sets it in both the function and variable slots of a given symbol (an argument provides for a different variable name if desired). When prefix keys appear in multiple active maps, those keymaps are effectively merged, searching for keys bound to the prefix key in the minor mode keymaps, then the local map, then the global map. ~mode-specific-map~ is a keymap bound to prefix ~C-c~ in the global map. I think modes set it but it stays global.

In Emacs, several toplevel keymaps are always active or searchable, in order of precedence (ignoring properties): minor mode keymaps in ~emulation-mode-map-alists~, ~minor-mode-overriding-map-alist~, and ~minor-mode-map-alist~; the current (mini)buffer's local map (usually set by the major mode and shared by all its buffers); and the global map shared by all buffers.

Other keymaps can be activated:
1. ~overriding-local-map~: When active, it replaces the usual active keymaps except for the global map. Higher precedence than the global map, like the local maps it overrides.
2. ~overriding-terminal-local-map~: Specifies a keymap that takes precedence over all maps, typically used for modal/transient keybindings. (See ~set-transient-map~).

Here is a pseudo-Lisp summary of how Emacs searches the active keymaps:

(or (if overriding-terminal-local-map
(FIND-IN overriding-terminal-local-map))
(if overriding-local-map
(FIND-IN overriding-local-map)
(or (FIND-IN (get-char-property (point) 'keymap))
(FIND-IN-ANY emulation-mode-map-alists)
(FIND-IN-ANY minor-mode-overriding-map-alist)
(FIND-IN-ANY minor-mode-map-alist)
(if (get-text-property (point) 'local-map)
(FIND-IN (get-char-property (point) 'local-map))
(FIND-IN (current-local-map)))))
(FIND-IN (current-global-map)))

current-active-maps: returns the list of active keymaps in current circumstances

key-bindings: retuns the binding for key according to the current active keymaps

global-map: default global keymap

current-global-map: returns the current global keymap

current-local-map: returns the current buffer's local keymap or nil

current-minor-mode-maps: returns list of keymaps of currently enabled minor modes

use-local-map

use-global-map

set-transient-map

minor-mode-map-alist: alist whose elements are (VARIABLE . KEYMAP). A particular keymap is active if VARIABLE is non-~nil~. Usually VARIABLE is the variable that enables or disables a minor mode. Note that KEYMAP is a list or a symbol whose function definition is a keymap.

minor-mode-overriding-map-alist: Allows major modes to override the key bindings for particular minor modes. If a variable appears as an element of this alist, the map speciied by that element replaces any map specified for the same variable in ~minor-mode-map-alist~. Same structure as that alist.

emulation-mode-map-alists: For modes or packages using multiple minor-mode keymaps. A list of keymap alists. That is, each element has the same structure and meaning as minor-mode-map-alist. Elements can also be a symbol whose variable value is an alist.

overriding-local-map: Holds a keymap used instead of the buffer's local keymap, any text property or overlay keymaps, and any minor mode keymaps. Overrides any active keymaps aside from the global map and overriding-terminal-local-map.

overriding-terminal-local-map: Holds a keymap to use instead of all others.

lookup-key: returns the definition of KEY in KEYMAP.

local-key-binding

global-key-binding

minor-mode-key-binding: returns a list of all the active minor mode bindings of KEY.

***** global-set-key KEY DEF
***** local-set-key KEY DEF
***** define-key KEYMAP KEY DEF
*** evil manual
initial state determined by major mode. evil-set-initial-state (by mode), evil-buffer-regexps (by buffer name), emacs-default-state

motation state bindings are visible in normal and visual state, and normal bindings are also visible in visual state

Each state has a local keymap (e.g., evil-normal-state-local-map). Set these in mode hooks. These are equivalent:

~(define-key evil-normal-state-local-map (kbd "w") 'some-function)))~
~(evil-local-set-key 'normal (kbd "w") 'some-function)~

***** evil-global-set-key STATE KEY DEF
***** evil-local-set-key state key def
***** evil-define-key STATE KEYMAP KEY DEF &rest BINDINGS
Create a STATE binding from KEY to DEF in KEYMAP. Multiple BINDINGS can be specified. If keymap is not initialized, this macro adds an entry to ~after-load-functions~, delaying execution.

If KEYMAP is ~'global~, bind in the global evil keymap corresponding to STATE (equiv. to ~evil-global-set-key~). If ~'local~, equiv. to ~evil-local-set-key~. If another quoted symbol, it is assumed to be the name of a minor mode (equiv. to ~evil-define-minor-mode-key~). If an unquoted symbol, assumed to be a major mode.

STATE is one of normal, insert, visual, replace, operator, motion, emacs, or a list of these. If nil,
***** evil-define-minor-mode-key
Unlike evil-define-key, which uses a specific map, this uses a specific mode to sotre bindings. These bindings are ultimately stored in auxiliary and minor-mode keymaps.
*** evil-core.el
Evil keymaps are kept in emulation-mode-map-alists, meaning only the non-evil overriding keymaps have higher precedence. Its keymaps have their own internal heirarchy:

1. Intercept keymaps (evil-make-intercept-map)
2. Local state keymaps (evil-local-set-key)
3. Minor-mode keymaps (evil-define-minor-mode-key)
4. Auxiliary keymaps (evil-define-key with a mode keymap)
5. Overriding keymaps (evil-make-overriding-map)
6. Global state keymap (evil-global-set-key)
7. Keymaps for other states (inherited)

These are listed in ~evil-mode-map-alist~.

The evil intercept maps are primarily used for debugging and handling the ESC key in the terminal. Local evil keymaps are primarily for user customizations for the current buffer. They take precedence over mode-specific bindings in the evil minor-mode and auxiliary keymaps. The former are bindings associated with a mode symbol rather than a specific keymap. These maps do not require a call to evil-normalize-keymaps to make bindings buffer-local. The latter are bindings associated with specific mode kemyaps. The evil overriding keymaps are used to adapt key-heavy Emacs modes, where all but a few keys should be left as-is and not be shadowed by evil's default bindings. Global bindings are visible across all buffers and modes where not shadowed by higher-precedency keymaps. Finally, some states inherit bindings from other states (e.g., normal from motion state).

Switching to another state via e.g. ~evil-normal-state~ updates the keymaps in ~evil-mode-map-alist~.

** References
*** [[info:elisp#Keymaps][elisp#Keymaps]]
*** [[info:evil#Top][evil#Top]]
Note that the info manual is written in some markup language that doesn't seem to render correctly. You may prefer the online [[https://evil.readthedocs.io/en/latest/overview.html][manual]].
*** [[https://github.com/emacs-evil/evil][GitHub]]
*** [[https://www.emacswiki.org/emacs/Evil][Wiki]]
*** *[[https://github.com/noctuid/evil-guide][evil-guide]]
*** [[https://github.com/noctuid/general.el][general.el]]
*** [[file:~/.emacs.d/straight/repos/evil/evil-core.el::;][evil-core.el]]
Includes 'commentary' that explains the precedence of evil keymaps relative to non-evil keymaps, and of individual evil keymaps relative to each other.

Intercept - evil-make-intercept-map
Local state - evil-local-set-key
Minor-modes - evil-define-minor-mode-key
Auxiliary (specific combo of state and mode) - evil-define-key
Overriding - evil-make-overriding-map
Global state - evil-global-set-key
** TODO Minimize the number of bindings in motion so that more modes can potentially be used with it instead of emacs mode
** evil-undo-system
:PROPERTIES:
:ID:       801F5693-4536-4362-B75C-B06BD633A69F
:END:
*** TODO Explore the undo-tree package's README
*** TODO Replace the parent buffer window with the diff window
Currently the changes in undo-tree-visualizer are shown in the parent buffer where it was called. I would like to show only the diff. See undo-tree-visualizer-parent-buffer
**** TODO Increase the size of the diff window
* projectile
:PROPERTIES:
:ID:       228E816A-00F3-46A9-B2AD-AC8BAA305A5A
:END:
See https://docs.projectile.mx/projectile/index.html
** TODO https://docs.projectile.mx/projectile/extensions.html
* company
:PROPERTIES:
:ID:       9A0C752C-DA2A-4A4C-B3A2-7D196335F7E9
:END:
** Notes
To see what completion would occur, use company-diag with point after the item to be completed. Source: https://github.com/emacs-ess/ESS/issues/565

company-search details: https://emacs.stackexchange.com/questions/53606/how-do-i-search-the-auto-complete-options
When used with lsp-mode, company-box provides custom icons and popup documentation to the right of completion items, similar to coc.nvim.
*** company temp notes
company-show-doc-buffer:
    Calls company--electric-do to save window configuration, gets doc-buffer (does not call company-doc-buffer),
    sets other-window-scroll-buffer to it, and calls (display-buffer doc-buffer t)
    * Advise function to get *company-documentation* buffer and call display-buffer to display help for ess in help window
    * Advice to set company--electric-saved-window-configuration to nil (advice C-h when in ess-mode?)
::: Press a keybinding :::
comapny mode: sets up company-pre-command, company-post-command
company-pre-command (run before each cmd):
    Calls company--electric-restore-window-configuration, which restores saved window config
    when calling a command not in company-electric-commands.
company-post-command (run after each command):
    company-install-map

company-doc-buffer: Create/reuse and return *company-documentation* buffer



company-install-map (investigate maps more later)
    company-emulation-alist
    company-my-keymap
differences
    company-idle-begin
    company-auto-begin
    company-manual-begin
company-begin-commands
    add evil/ess paren commands to e.g. trigger selection for function calls
    or set to t

display-buffer buffer-or-name &optional action frame
[display] action: (functions . alist)
    functions can be a single function or a list of functions
function buffer alist
Precedence of display actions:
    display-buffer-overriding-action
    action argument of display-buffer
    display-buffer-base-action
    display-buffer-fallback-action
Steps:
1. display-buffer creates a list of action functions and a combined action alist according to precedence.
1a. Note that this doesn't mention buffer regular expressions used in lieu of functions (see
    display-buffer-alist)
2. It calls the actions functions in order, with the buffer and combined action alist as args,
   until one returns non-nil
*** display-buffer
company-show-doc-buffer:
    Calls company--electric-do to save window configuration, gets doc-buffer (does not call company-doc-buffer),
    sets other-window-scroll-buffer to it, and calls (display-buffer doc-buffer t)
    * Advise function to get *company-documentation* buffer and call display-buffer to display help for ess in help window
    * Advice to set company--electric-saved-window-configuration to nil (advice C-h when in ess-mode?)
::: Press a keybinding :::
comapny mode: sets up company-pre-command, company-post-command
company-pre-command (run before each cmd):
    Calls company--electric-restore-window-configuration, which restores saved window config
    when calling a command not in company-electric-commands.
company-post-command (run after each command):
    company-install-map

company-doc-buffer: Create/reuse and return *company-documentation* buffer

company-install-map (investigate maps more later)
    company-emulation-alist
    company-my-keymap
differences
    company-idle-begin
    company-auto-begin
    company-manual-begin
company-begin-commands
    add evil/ess paren commands to e.g. trigger selection for function calls
    or set to t

display-buffer buffer-or-name &optional action frame
[display] action: (functions . alist)
    functions can be a single function or a list of functions
function buffer alist
Precedence of display actions:
    display-buffer-overriding-action
    action argument of display-buffer
    display-buffer-base-action
    display-buffer-fallback-action
Steps:
1. display-buffer creates a list of action functions and a combined action alist according to precedence.
1a. Note that this doesn't mention buffer regular expressions used in lieu of functions (see
    display-buffer-alist)
2. It calls the actions functions in order, with the buffer and combined action alist as args,
   until one returns non-nil
** TODO company-fuzzy for non-lsp modes?
** TODO Add bindings for company-show-doc-buffer and the ess help function (currenlty C-c C-v) outside of company completion
** TODO Any compelling reason to use icons instead of default images?
See https://github.com/sebastiencs/company-box/wiki/icons
* ess-r-hydra
:PROPERTIES:
:ID:       4FB5B508-C8E6-48F5-9EC2-7B3BB0E2347D
:END:
Major-mode binding (i.e., ~(my-leader :keymaps 'ess-r-mode-map "m" 'hydra-r/body)~) is more efficient than buffer-local binding (i.e., ~(my-leader :keymaps 'local "m" 'hydra-r/body)~) in the body of a hook (i.e., ~config-ess-r-mode~).
* which-key
:PROPERTIES:
:ID:       02B569E2-2C54-47E5-AFDA-A9F171E94994
:END:
Must come last only because of the calls to my/defhydra. And that call is safest at the end due to use of my/defhydra+. We could run them in a hook that runs after reading the config to get around that.
* xwwp
:PROPERTIES:
:ID:       995FC02C-0866-4448-84DA-9B66A677CE59
:END:
Enhanced xwidget-webkit browser
** TODO xwwp-browse-url-other-window
The first time it's invoked it creates a buffer in the current window. It's not until the second call that it switches to the other window.
* COMMENT org-babel-detangle
For lisp files generated by tangling an org file, propagate changes to the lisp file back to the org file on save.

There are two requirements:

1. The org file is tangled to the lisp file with header argument ~:comments link~ or ~:comments both~.
   A. If changing the header argument in the current session to enable comment links, you must save, then call ~revert-buffer~ before tangling. ~org-babel-tangle~ seems to use the header arguments that exist at the time the buffer is first created.
2. The org headings are globally unique. Headings at different levels and under different parent headings must not share the same name, or org-babel-detangle~ might overwrite multiple blocks with the contents of one block. E.g., I had to change the name of the "org" heading under parent heading "general" to "general-org" because a heading on the same level as "general" was also named "org".

Assuming the tangling process works correctly, there is no need to ~git diff~ init.org. You can simply diff init.el. Any non-user changes to the file will be visible the next time you tangle init.org.

WARNING: Automatic detangling is dangerous. E.g., running ~git restore init.el~ to make Emacs work long enough to fix a broken config, editing the file, then saving, will overwrite init.org and potentially lose unsaved work.

#+begin_src emacs-lisp :tangle no
(defun detangle-and-save-org-file ()
  "Detangle lisp file, save org file, and stay in the source file"
  ;; Detect interactive saves by the user only. This will fail to detangle on
  ;; automatic saves but prevents error messages in customization buffers (most
  ;; likely because they overwrite custom.el) Alternatively, you could include
  ;; or exclude certain files or directories.
  (if (memq this-command
            ;; Ad-hoc list of likely save functions that could be called by user
            '(evil-write evil-save-and-quit evil-save-and-close evil-write-all
              save-buffer save-some-buffers ))
      (save-window-excursion
        (let (win (get-buffer-window))
          (org-babel-detangle) ; Makes org file visible but not current buffer
          (with-current-buffer (window-buffer win) ; Make visible buffer current
            ;; Avoids tangling the file where org-babel-detangle was just called
            (let ((after-save-hook (remove 'org-babel-tangle after-save-hook)))
              ;; org-babel-detangle does not save the detangled org file
              (save-buffer)))))))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (add-hook 'after-save-hook 'detangle-and-save-org-file nil t)))
#+end_src
** TODO Function to test that all org heading names are globally unique
Add the function to after-save-hook for org-mode buffers. It should throw a warning that non-unique names must be changed before running org-babel-detangle.

Better yet add it to before-save-hook to prevent save until non-unique names are replaced.
* COMMENT syntax highlighting
** COMMENT highlight-defined
Add syntax highlighting for more of elisp: defined functions, amcros, faces, and variables.

#+begin_src emacs-lisp
(straight-use-package 'highlight-defined)

(add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode)
#+end_src
** COMMENT color-identifiers
#+begin_src emacs-lisp
(straight-use-package 'color-identifiers-mode)

(add-hook 'after-init-hook 'global-color-identifiers-mode)
#+end_src

*** TODO Compare to semantic highlighting via lsp-mode
*** TODO https://github.com/ankurdave/color-identifiers-mode/issues/27
Only if you choose to continue using the package.
* COMMENT workspace
** COMMENT centaur-tabs
centaur-tabs is the most customizable aesthetically. It auto-switches tabs based on the buffer group of the visible buffer. Tabs can show either the group (like tab-bar) or fellow group buffers (like tab-line). But each window has its own tabs rather than the frame. Switching groups also doesn't switch window configs.
#+begin_src emacs-lisp
(straight-use-package 'centaur-tabs)
(setq centaur-tabs-style "wave"
      centaur-tabs-height 32
      centaur-tabs-close-button "")

(centaur-tabs-mode)
;; centaur-tabs-toggle-groups
(define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
(define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)
;; centaur-tabs-counsel-switch-group
;; centaur-tabs-group-by-projectile-project / centaur-tabs-group-buffer-groups

#+end_src
** COMMENT perspective-el
#+begin_src emacs-lisp
(straight-use-package 'perspective)

(setq persp-state-default-file
      (expand-file-name "perspective-save"
                        user-emacs-directory))

(persp-mode)

;; Avoid a file parsing error when the save file does not already exist
(if (file-exists-p persp-state-default-file)
    ;; I chose the latest hook possible per
    ;; [[info:elisp#Startup Summary][elisp#Startup Summary]] so that
    ;; org-visual-line's hooks are added beforehand. Otherwise, the user has to
    ;; call revert-buffer to render the org buffer correctly
    (add-hook 'window-setup-hook
              ;; Does not save non-file-visiting buffers "with non-trivial
              ;; state". They are replaced with *scratch* Calls persp-mode, but
              ;; isn't provided until persp-mode requires the package.
              (lambda ()
                (persp-state-load persp-state-default-file))))
(add-hook 'kill-emacs-hook #'persp-state-save)

(my-leader "p" '(:keymap perspective-map))

(general-unbind perspective-map
  "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "`" "i" "<left>" "<right>" "C-x")

(general-def :keymaps 'perspective-map
  "b" 'persp-ivy-switch-buffer
  "B" 'persp-switch-to-buffer
  "x" 'persp-switch-last)

;; persp-switch-to-buffer shows buffers from all perspectives and switches
;; perspectives if necessary. This shows only the current perspective's
;; buffers, unless called with C-u. If called with C-u, it will add the buffer
;; to the perspective rather than switch perspectives. persp-ivy-switch-buffer
;; replaces persp-switch-to-buffer* (with a star).
(defhydra+ hydra-buffer (:color pink)
  ("b" persp-ivy-switch-buffer :color blue)
  ("B" persp-switch-to-buffer :color blue))
#+end_src
*** TODO Automatic perspectives
*** TODO https://github.com/bbatsov/persp-projectile
** COMMENT tab-bar
#+begin_src emacs-lisp
(straight-use-package 'tab-bar)

(defun current-tab-name ()
  (alist-get 'name (tab-bar--current-tab)))

;; (setq global-mode-string
;;       '("" (:eval (cdr (nth 1 (assq 'current-tab
;;       (bufler-workspace-tabs)))))))
#+end_src
*** TODO Convert this idea from tab-line to tab-bar
https://andreyorst.gitlab.io/posts/2020-05-10-making-emacs-tabs-look-like-in-atom/
** COMMENT bufler
Installation fails on MacOS with emacs-plus@27 but not 28. There are several bug reports:
- [[https://github.com/alphapapa/bufler.el/issues/70][bufler.el Issue 70]]
- [[https://github.com/raxod502/straight.el/issues/822][straight.el Issue 822]]

This package provides automatic buffer grouping and commands to operate on specific groups of buffers. Unfortunately, it has no built-in support for window configs tied to buffer groups. And bufler-tabs-mode only seems to display buffers with tab-mode and tab-line-mode, but doesn't switch window configurations when switching tabs.
#+begin_src emacs-lisp
(straight-use-package 'bufler) ; Depends on hydra through hydra-pretty

(customize-package
 '(bufler-columns '("Name" "VC")))

;; Disabled in favor of perspective workspaces
;; (bufler-mode) ; Provides bufler-tabs-mode
;; (require 'bufler)
;; (require 'bufler-workspace-tabs)
;; (bufler-tabs-mode)
;; (global-tab-line-mode -1) ; Disable global-tab-line-mode
;; (setq global-mode-string
;;       '("" (:eval (cdr (nth 1 (assq 'current-tab (bufler-workspace-tabs)))))))

;; Each element of the list is either:
;; (1) a function which takes a buffer as its only argument and returns a string
;; naming the group the buffer should be in at that level (or nil for no
;; grouping by that function). Each buffer is matched against functions in-order
;; until the list of functions is exhausted.
;; (2) a list of functions and/or lists, recursively. Lists represent
;; subgroups. Subgroups short-circuit other (sub)groups at the same level.
;; To create subgroups, use `group'. The other "meta types" compose multiple
;; types into a single group but do not short-circuit like subgroups.

(setf bufler-groups
      ;; Macro that allows for shorter grouping syntax. E.g.,
      ;; bufler-group-mode-match -> mode-match
      (bufler-defgroups
       ;; Subgroup collecting all named workspaces.
       (group (auto-workspace))
       ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
       (group (group-or "*Help/Info*"
                        (mode-match "*Help*" (rx bos "help-"))
                        (mode-match "*Info*" (rx bos "info-"))))
       ;; Subgroup collecting all special buffers (i.e. ones that are not
       ;; file-backed), except `magit-status-mode' buffers (which are allowed to
       ;; fall through to other groups, so they end up grouped with their
       ;; project buffers).
       (group
        (group-and "*Special*"
                   (lambda (buffer)
                     (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                          buffer)
                                 (funcall (mode-match "Dired" (rx bos "dired"))
                                          buffer)
                                 (funcall (auto-file) buffer))
                       "*Special*")))
        (group
         ;; Subgroup collecting these "special special" buffers
         ;; separately for convenience.
         (name-match "**Special**"
                     (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
        (group
         ;; Subgroup collecting all other Magit buffers, grouped by directory.
         (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
         (auto-directory))
        ;; Subgroup for Helm buffers.
        (mode-match "*Helm*" (rx bos "helm-"))
        ;; Remaining special buffers are grouped automatically by mode.
        (auto-mode))
       ;; All buffers under "~/.emacs.d" (or wherever it is).
       (dir user-emacs-directory)
       (group
        ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
        ;; `org-directory' is not yet defined).
        (dir (if (bound-and-true-p org-directory)
                 org-directory
               "~/org"))
        (group
         ;; Subgroup collecting indirect Org buffers, grouping them by file.
         ;; This is very useful when used with `org-tree-to-indirect-buffer'.
         (auto-indirect)
         (auto-file))
        ;; Group remaining buffers by whether they're file backed, then by mode.
        (group-not "*special*" (auto-file))
        (auto-mode))
       (group
        ;; Subgroup collecting buffers in a projectile project.
        (auto-projectile))
       (group
        ;; Subgroup collecting buffers in a version-control project,
        ;; grouping them by directory.
        (auto-project))
       ;; Group remaining buffers by directory, then major mode.
       (auto-directory)
       (auto-mode)))

;; Temporary hack to use the provided hydra. Because it is built with
;; pretty-hydra it is named hydra:bufler/body (with a colon), which doesn't yet
;; work with my/defhydra. The hydra is bound to "?" in `bufler-list', but it's
;; not entirely accurate or comprehensive.
;; Hydra is invoked with "?"
(defun make-hydra-helpful (func &rest args)
  (let ((hydra-is-helpful t)
        (which-key-show-transient-maps nil))
    (apply func args)))
(advice-add 'hydra:bufler/body :around 'make-hydra-helpful)

(defhydra+ hydra-buffer (:color blue)
  ("b" bufler-switch-buffer)
  ("B" bufler))
#+end_src
*** TODO C-u C-u C-u SPC bufler-switch-buffer is required to see \ast{}straight-process\ast{}
This is because of filter funcion(s) that hide certain buffers from the list automatically. The defaults are at least a problem for straight.el, and need to be modified.
*** TODO buffer-switch-buffer shows buffers from other workspaces, but not always
This assumes workspaces are in use via ~bufler-mode~. Sometimes the buffers are eventually hidden after switching to other buffers belonging to the workspace. I want to get rid of any non-workspace buffers, even if it means buffer-switch-buffer has no other buffer to switch to.
*** TODO bufler-list-buffer-peek does not close the buffers it opens
* delight
~diminish~ hides minor mode "lighter", or indicator, text from the modeline. It may require ~eval-after-load~ for modes that haven't been defined by loading their library file.

Indicators can be viewed via ~describe-mode~ (C-h m) and a search for "indicator".

~delight~ can replace indicator text, additionally encompasses major modes, and automatically uses ~eval-after-load~ if needed. See https://elpa.gnu.org/packages/delight.html for usage, including how to debug failed attempts at replacement. Its arguments, in order, are:

1. The CAR of each list element in ~minor-mode-alist~. This is usually the minor-mode symbol, though ~auto-fill-mode~ provides an exception (~auto-fill-function~).
2. Replacement text (~nil~ for hiding text) or code. Note that some default text may be programatically generated rather than a simple string. You can replace this with a simple string; however, you may want to check the CDR before invoking ~delight~.
3. One of ~:major~ (for major modes), the filename-without-suffix defining the mode (a string), the feature provided by that file (a symbol), or ~t~ or ~'emacs~ for previously loaded modes (the latter if the mode is pre-loaded by default when Emacs starts). This argument can be omitted if the mode symbol and file or feature providing it are identical (including ending in, e.g., "-mode")

To find the file defining a mode, use ~describe-symbol~ (C-h s) or ~describe-function~ (C-h f). To see if this file matches a feature name, view ~features~.

For the mode-line as a whole, see ~mode-line-format~ or ~(M-: (info "(elisp) Mode Line
* emacs-lisp
:PROPERTIES:
:ID:       30BA0357-3AC7-4334-ADD7-4EF1E7210E42
:END:
* outline
:PROPERTIES:
:ID:       2FFF8009-236C-44D2-BF05-59AA3417E028
:END:
** TODO undo system registers link display as the first edit. THis means the buffer is edited even before it's edited. And the change isn't an actual chnage to the text so shouldn't register as modified
Disable undoing link display
** TODO For each mode using outline-minor-mode
*** create a hook similar to emacs-lisp-mode-hook
** TODO use modification-hooks text property to update the heading link and the org-roam file title when the link description is updated.
** TODO https://github.com/tarsius/bicycle/blob/master/bicycle.el
** TODO [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Mode.html][https://www.gnu.org/software/emacs/ma...]]
** Create commands
*** TODO Insert heading at end of subtree (C-RET in org)
** TODO outline-ivy, bullets, and ellipsis
- https://www.modernemacs.com/post/outline-ivy/
- [[https://github.com/ekaschalk/.spacemacs.d/tree/master/layers/display/local/pretty-outlines][https://github.com/ekaschalk/.spacema...]]
** TODO counsel-outline settings
** TODO extract useful code from the abandoned outshine package
* hideshow
:PROPERTIES:
:ID:       8845E467-2223-4380-9B7A-A709243FAE30
:END:

origami-close-all-nodes fails in my init.el with an error about unbalanced parentheses that may have to do with scanning within comments. Until this is fixed, origami is unusable with lisp. Furthermore, even if it was fixed there is no language server for lisp, so lsp-origami can't be used with lisp files. Code folding should be provided for all modes by a single package; hence, hideshow.
* lsp-mode
:PROPERTIES:
:ID:       99CC6056-3E6A-4BE2-A97F-337EA53CEAFC
:END:
** ess
*** TODO Find a way to modify trigger characters to enable signature displayafter typing a comma between function args
**** TODO How can I configure R languageserver?
Configuration might be possible via ~lsp-register-custom-settings~ and/or ~lsp--set-configuration~? See https://github.com/emacs-lsp/lsp-mode/issues/167 and https://emacs-lsp.github.io/lsp-mode/page/adding-new-language/. It may require modifying lsp-r.el. See other client files for inspiration. The settings are detailed at https://github.com/REditorSupport/languageserver. Settings include server capabilities.
*** TODO Auto-formatting and formatting rules
Auto-formatting has rules I don't understand fully. If you create a vector with no space between commas,then hit enter immediately after the closing paren, the spaces are inserted. If you hit enter with space after the closing paren, spaces are not inserted. Replacement of = with <- only happens when you manually call lsp-format-buffer. But it additionally only happens if there is some other formatting to fix, like missing space between commas or the LHS and RHS of the equal sign.

Auto-formatting doesn't seem to work, which could be an issue with trigger characters. lsp-format-buffer works but only in certain cases. If a variable is assigned to an integer using the ~=~ operator, nohting happens. If it is a non-integer, ~=~ is changed to ~<-~.
*** TODO Neither eldoc nor lsp highlights the current argument in the function signatures in the echo area
*** TODO lsp symbol highlighting is inaccurate
It highlights all symbols, even if they are semantically different. E.g., function argument x and function named x in different scopes.

This may be by design: https://github.com/REditorSupport/languageserver/issues/129
*** TODO lsp-enable-which-key-integration assumes we are using lsp-keymap-prefix
I modified it to work with "SPC l" but it will need additional edits to work with a second (non-normal) prefix (C-SPC l). Possibly calling the function a second time with a different version of lsp--prepend-prefix
*** TODO Compare lsp-mode to eglot
* afternoon-theme
:PROPERTIES:
:ID:       F7407359-115A-464F-92BC-49D2B465DCEE
:END:
** faces
*** TODO company
https://emacs.stackexchange.com/questions/53606/how-do-i-search-the-auto-complete-options
*** TODO ranger selected item
*** TODO org code emphasis (matches h3)
* yasnippet
:PROPERTIES:
:ID:       3845B7F1-CF66-4A10-8756-1B6F2522E202
:END:
** Resources
1. https://joaotavora.github.io/yasnippet/
** Summary
Snippets are stored within snippet files in ~yas-snippet-dirs~. With ~yas-minor-mode~, ~yas-expand~ will expand snippet abbreviations or keys if there is a subfolder within ~yas-snippet-dirs~ that matches the value of a buffer's ~major-mode~ and if one its snippet files has a matching ~keys~ directive. ~yas-maybe-expand~ is bound to ~SPC~. When a snippet key precedes point the snippet key will expand to the full snippet; otherwise, ~SPC~ runs ~self-insert~. This is possible because ~yas-maybe-expand~ is actually a variable (notice the lack of a quote when binding it) that defines a menu-item with a filter. If the filter doesn't apply, the next binding with precedence occurs. In other words, the binding is conditional! See [[id:36C99434-8C09-427A-BB4C-431D14A03F60][~yas-maybe-expand~]] for notes on binding to other keys. For other ways to expand snippets, see [[https://joaotavora.github.io/yasnippet/snippet-expansion.html#org12170ff][https://joaotavora.github.io/yasnippe...]] and [[id:8B1BF18C-7B78-4271-8357-61548BEB84E1][Expanding snippets]].

Expansion is currently prevented in comments and strings through ~yas-buffer-local-condition~.

Commands for creating and editing snippets are bound to ~SPC y~. Within a snippet file, ~snippet-mode~ provides commands for testing the snippet that are bound to ~SPC m~.

When ~yas-minor-mode~ is added to a mode's hook function, in contrast to using ~yas-global-mode~, ~yas-reload-all~ should be called to load snippets into Emacs.

~prioritize-yas-keymap-bindings~ is used to make ~yas-keymap~ bindings that are active during snippet completion (e.g., ~TAB~ to jump between snippet fields) take precedence over ~company-active-map~ bindings that are present when the company tooltip is active. In ~lsp-mode~, the company tooltip is always active when typing.
** lsp-mode parameter completion
With yasnippet, parameter completion in lsp-mode works as follows for Python: Autocompleting a function sometimes inserts it with all of its parmaeters and the ability to insert a value for one, then jump to the next, and so on. Not all functions do this. Those with two arguments do seem to. In contrast, the default settings in emacs go as follows. For the first named argument in python, begin to type the letter and the param will show up to complete. Follow its values by a comma (space optional),then press tab. The completion will now include and be limited to a list of parameters. Note that improper syntax such as name=, (i.e., with no value) will halt parameter completion. As you add arguments, positional or named, the completion list shrinks. It may exclude unused parameters if you don't use signature order, though perhaps that can be tweaked. See e.g. os.fdopen(). As you fill in named/positional parameters, your completion list shrinks.

The lsp-mode-style parameter completion does not work for ess-r-mode. Instead, regular company completion of parameters is acceptable for inserting named parameters.
** ~yas-maybe-expand~
:PROPERTIES:
:ID:       36C99434-8C09-427A-BB4C-431D14A03F60
:END:
This example binds to ~TAB~ and ~<tab>~. ~prioritize-yas-minor-mode-bindings~ attempts to ensure that ~yas-maybe-expand~ is not shadowed by ~<tab>~ or ~TAB~ in other minor modes. It does this by adding the ~yas-minor-mode~ element to the front of ~minor-mode-alist~, but the end result depends on the order in which minor modes are added to the alist both before and after startup. One potential solution is to advise ~load~ to always keep ~yas-minor-mode~'s element at the top of the alist:
[[https://emacs.stackexchange.com/questions/13447/how-to-set-a-rule-for-the-order-of-minor-mode-map-alist][https://emacs.stackexchange.com/quest...]]. Within use-package, the following should be present:

#+begin_src emacs-lisp
:hook
(emacs-startup . prioritize-yas-minor-mode-bindings)
:general
(:keymaps 'yas-minor-mode-map
          "TAB" 'yas-maybe-expand
          "<tab>" 'yas-maybe-expand)
(:keymaps 'company-active-map
          "<tab>" nil
          "TAB" nil
          "<return>" 'company-complete-selection
          "RET" 'company-complete-selection)
(defun prioritize-yas-minor-mode-bindings ()
  (let ((ymm_keymap (assq 'yas-minor-mode minor-mode-map-alist)))
    (assq-delete-all 'yas-minor-mode minor-mode-map-alist)
    (add-to-list 'minor-mode-map-alist ymm_keymap)))
#+end_src

Note that this does not prevent higher precedence keymaps than minor mode maps (i.e., overriding, text property or overlay, and emulation) from shadowing ~yas-maybe-expand~.

** Expanding snippets
:PROPERTIES:
:ID:       8B1BF18C-7B78-4271-8357-61548BEB84E1
:END:
There are multiple ways to interact with snippets. So far, I have tested:

1. ~company-yasnippet~ company backend, which expands snippets selected through the company tooltip. This changes candidates and/or their order (unclear which). ~company-transformers~ attempts to correct this, but I don't know enough about sorting or this variable. See https://github.com/emacs-lsp/lsp-mode/issues/3173 and https://github.com/tigersoldier/company-lsp/issues/119. One issue is that the backend seems to include results everywhere, without prefix text. This is especially annoying when completing function parameters.
   #+begin_src emacs-lisp
(setq lsp-completion-provider :none)
(setcar (nthcdr (-elem-index 'company-capf company-backends)
                company-backends)
        `(company-capf :with company-yasnippet))
(setq company-transformers '(company-sort-prefer-same-case-prefix))
   #+end_src
2. ~yas-insert-snippet~ presents a list of snippets when used with ivy-mode.
3. ~yas-expand~ described earlier.
* flycheck
:PROPERTIES:
:ID:       EDD9274F-331D-46FD-BF7F-30371EB931C0
:END:
** Summary
Linting package that can be used as-is or as a dependency for lsp-diagnostics.
** Tasks
*** Configure for major-modes
**** ess-r
Uses lintr
**** emacs-lisp
**** python
* investigations
:PROPERTIES:
:ID: 1992f6fa-5955-4183-a1ee-cf4f8976a4af
:END:
