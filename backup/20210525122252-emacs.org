:PROPERTIES:
:ID:       B71794A2-7543-43A5-B6FC-66B9F5CD2EB3
:END:
#+title: Emacs

* Tasks
** TODO Investigate these packages
*** projectile
*** org-roam / org-roam-bibtex / org-noter
*** emacs-jupyter
*** TommyX12/company-tabnine (for javascript and python)
*** pcre2el
*** transient
See the manual for a comparison to hydra
*** ess-r
**** TODO Make polymode-display-output-file conditional on the Rmarkdown output type
I want to display PDFs in a buffer, but not Word documents. Word documents by default open a zip-archive buffer. Unless there is a way to open it outside of Emacs, or properly within Emacs, it should be disabled.
**** TODO Fix the broken undo system for polymode, or find an undo package that works. Maybe built-in undo? I only installed undo-fu b/c of an evil-related prompt or error.
**** TODO Fix the insertion of ` at the bottom of chunks. Currently, the cursor jumps to an adjacent chunk, at least if no text is present between the chunks.
**** TODO Fix the disappearing face (reappears on typing a character) for chunks and sticking visual selection face within chunks (until moving cursor between selection and an adjacent unselected line)
** comments
On the line after one with a ';' comment, run C-u C-x ; to insert a comment and indent it to the same column as the previous line. Type M-j to create subsequent aligned comment lines. It does this by setting comment-column. There must be a way to do so automatically. Note that auto-fill-mode starts a comment on the next line at the same indentation when fill-column is reached
** Bind keybindings to leader
Especially org-mode but also customize (e.g., customize-changed, customize-group-other-window, etc.)
** https://vxlabs.com/2020/03/07/patch-emacs-org-open-file-using-advice/
Better solution than my org-open hacks?
** The author of marginalia recommends packages embard and consult:
https://www.reddit.com/r/emacs/comments/ke7bsd/marginaliael_rich_annotations_in_the_minibuffer/
** Organize config like the Emacs manual (e.g., section 14 for appearance)
** Line wrapping
**** Investigate line wrapping docs including those on auto-fill, adaptive-wrap and adaptive-fill; the manuals; simple.el; and mode-specific wrapping in packages and distributions such as spacemacs.
**** Investigate solutions to using evil and visual-line-mode together
Keybindings don't work as expected and moving lines can lead to unexpected jumps if you are not at the start of a line.
***** Consider disabling visual-line-mode for org-mode and [[https://emacs.stackexchange.com/questions/18101/org-mode-multi-line-emphasis-and-bold][changing org-mode regexp to enable multiline emphasis]].
** Marginalia
*** The author recommends packages embard and cosult
Here:  https://www.reddit.com/r/emacs/comments/ke7bsd/marginaliael_rich_annotations_in_the_minibuffer/
** org-roam
*** https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html
** Replace org-mode with outline for source code
*** TODO lisp
https://www.modernemacs.com/post/outline-ivy/
*** TODO Outline mode for R
https://confunguido.github.io/blog/20190317_emacs_for_R.html (toward bottom of webpage)
** TODO Setup company for R, Python, and lisp
** TODO Make graphical emacs inherit shell variables if launched outside of shell
*** Potential solution: https://github.com/purcell/exec-path-from-shell
**** Issue is that it requires avoiding recursive syntax in the shell
This may be solvable by using the zsh facility for removing duplicates in list variables
*** Alternative: Write lisp code to copy shell variables like $PATH
** TODO Navigation and searching in org-mode
*** counsel-outline
*** https://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading (org-goto / org-refile)
*** org-occur
*** org-sparse-tree
*** Numeric prefix to SHIFT-TAB keeps code blocks and text hidden but expands to show level-n headers.
*** Show only code blocks? Use org-occur > regexp > begin_src
** TODO Finish taking notes on elisp
Currently on Chapter 6 Sequences, Arrays, and Vectors
** TODO Imitate config @ https://www.youtube.com/watch?v=rH3ZH95zjKM

This is his github: https://github.com/zaiste/
** TODO Beautify org mode
*** https://zzamboni.org/post/beautifying-org-mode-in-emacs/
*** https://mstempl.netlify.app/post/beautify-org-mode/
*** https://orgmode.org/worg/org-tutorials/org-appearance.html
*** Remove grey lines following some collpased headings with code blocks
This was an issue in the solarized dark theme
*** DONE Improve ease of editing hidden emphasis markers and prettified latex
CLOSED: [2021-07-25 Sun 15:34]
Solved with org-appear.

One idea is to unhide them when cursor is hovering.
**** https://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html
**** https://www.reddit.com/r/emacs/comments/i9pfld/disable_orgprettyentities_on_the_current_line/
**** https://www.reddit.com/r/orgmode/comments/43uuck/temporarily_show_emphasis_markers_when_the_cursor/
**** https://www.reddit.com/r/orgmode/comments/dj5u1y/weirdness_with_orghideemphasis/
* Catch-all Notes
** Unbinding keys
Remap a command to the ignore command. This is the closest I have found to unbinding a key by command name instead of key. Note that this doesn't display as I expected in describe-variable.
#+begin_src emacs-lisp
(general-unbind :keymaps 'pdf-view-mode-map
  :with 'ignore
  [remap pdf-view-jump-to-register])

;; Same as
(define-key pdf-view-mode-map [remap pdf-view-enlarge] 'ignore)
#+end_src
** org
*** To store a link to the current buffer (e.g., info page)
org-store-link
*** Searching properties
**** org-search-view (org-agenda > s)
This suggests there's some potentially obscure or undocumented regex: https://stackoverflow.com/questions/20715106/org-agenda-regexp-search-categories. It also links here: https://orgmode.org/worg/org-tutorials/advanced-searching.html#property-searches. Read the comments in the stackoverflow answer.
****
*** realign tags
C-u c-c c-c on a heading with tags realigns all tags at proper width
** org-appear
*** Escaping emphasis markers in org-mode
In 202100608142822-elisp.org, I had the following heading:

⋆⋆⋆⋆ \slash{}xx= /number-or-marker1/ /number-or-marker2/

This uses a zero-width space (symbolized by 'xx') after the emphasis marker for italics, a forward slash, to escape emphasis. The function name is itself \slash{}=, but org-hide-emphasis-markers in conjunction with org-appear-autoemphasis was hiding the literal forward slash before I added the zero-width space.

A better solution is to insert an org entity via org-counsel-entity, M-o (actions), o (org entity). Follow the character by brackets if there is subsequent text without a space. If org-appear-autoentities and org-pretty-entities are enabled, this will show the desired character without the need to escape empahsis.
**** Searching for zero width characters
Try isearch-char-by-name.
** org-babel
Header arguments are used to customize src blocks (e.g., whether to tangle to a src file or not). They can be set globally through file-level ~#+PROPERTY: header-args HEADER-ARGS~. Local header arguments override global settings.

Header args can be specific to a language such as R:
~#+PROPERTY: header-args:R :exports results~

Normally for repeated property lines for the same property (e.g., ~header-args~), only the last line is used. To instead concatenate lines, postfix the property with a ~+~:
#+PROPERTY: header-args:R :exports results
#+PROPERTY: header-args:R+ :width 800

Note that an older syntax for header arg file proeprties has been deprecated:
~#+PROPERTY: tangle ~/.emacs.d/elisp/init-example.el~
*** TODO Is there a way to make my current babel settings more robust?
Currently the entire file is tangled globally, so indidivudal blocks specify ~:tangle no~. I have noticed that having even a single ~:tangle yes~ block changes the behavior. It prevents all the other unspecified blocks that rely on the global setting from being tangled. This happened recently with a merge conflict with files from work that still contained the old style of blocks.
*** References
https://org-babel.readthedocs.io/en/latest/header-args/
** info
C-h i opens info. g searches for info manuals. g again searches through nodes.
* Packages
** [[id:8B1AF8E1-5E08-4210-BB78-7D00642ACE8A][delight]]
** [[id:881A8FD3-04A9-4DA1-86C7-14B6A360FA2A][custom.el]]
** [[id:30ADD21B-7F6E-4F13-920A-57C501ABA8D6][straight.el]]
** [[id:1E4652D7-4CC3-4BDB-ACBC-390D91965C92][emacs-evil]]
** [[id:65439EB4-C559-4743-B17B-EF0E3FB62070][org-mode]]
** [[id:63820A7C-FED3-4428-B9FC-33B924766D9A][org-roam]]
** [[id:E57F8174-560C-4714-BDE9-FBC98E1C8C7A][hydra.el]]
** [[id:9AB8A6F3-88ED-49A0-910C-DDC7523A903F][company.el]]
** [[id:6B9E1A34-788C-4B8D-BD07-2E8059336BA8][general.el]]
* Archives
** Startup
#+begin_src emacs-lisp :tangle no
  (defun my/init-maybe-profile (&optional when?)
    "Optionally profile load before or after package initialization. See results of
  profiling with `benchmark-init/show-durations-tree' (calls shown in reverse order)
  or in a sortable table with `benchmark-init/show-durations-tabulated'.

  when? can have values of before-init, after-init, or anything else for no profiling."
    (defun my/profile ()
      (load (concat (car (file-expand-wildcards "~/.emacs.d/elpa/benchmark-init*" t))
                    "/benchmark-init"))
      (add-hook 'after-init-hook 'benchmark-init/deactivate)
      (benchmark-init/activate))

    (defun my/init ()
      ;; Configure package.el
      (require 'package)
      (setq package-archives '(("gnu"   . "http://elpa.gnu.org/packages/")
                               ("melpa" . "https://melpa.org/packages/")))
      ;; Add pkg files to load-path and Info-directory-list; ready autoloads
      (package-initialize))

    (pcase when?
      ('before-init (my/profile) (my/init))
      ('after-init (my/init) (my/profile))
      (_ (my/init))))  ;; Includes nil argument

  (defun my/start-r ()
    "Start an R process."
    (interactive)
    (save-selected-window
      (run-ess-r)
      ;;(ess-rdired)
      )
    (ess-force-buffer-current))
#+end_src
** LSP
#+BEGIN_SRC emacs-lisp :tangle no

  ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;; (use-package lsp-treemacs :commands lsp-treemacs-error-list)
  ;; (use-package dap-mode)
  ;; (require 'dap-python)
  ;; Testing out for parameter completion in lsp...
  ;; (use-package yasnippet
  ;;   :hook ((python-mode . yas-minor-mode)
  ;;          (ess-r-mode . yas-minor-mode)))

  (setq read-process-output-max (* 1024 1024)
        lsp-prefer-capf t
        lsp-idle-delay 0.500)

  (customize-package
   '(lsp-auto-guess-root t)
   '(lsp-completion-provider t)
   '(lsp-document-sync-method nil)
   '(lsp-eldoc-enable-hover nil)
   '(lsp-eldoc-render-all nil)
   '(lsp-enable-snippet nil)
   '(lsp-enable-text-document-color t)
   '(lsp-headerline-breadcrumb-enable nil)
   '(lsp-log-io t)
   '(lsp-print-performance t)
   '(lsp-pyls-plugins-jedi-completion-include-params t)
   '(lsp-signature-auto-activate t)
   '(lsp-signature-doc-lines 10)
   '(lsp-signature-render-documentation t))

  (straight-use-package 'lsp-mode)

  (add-hook 'python-mode-hook 'lsp)
  ;; (add-hook 'ess-r-mode-hook 'lsp)
  (add-hook 'lsp-mode 'lsp-enable-which-key-integration)

  (customize-package
   '(lsp-ui-doc-alignment 'window)
   '(lsp-ui-doc-border "#93a1a1")
   '(lsp-ui-doc-enable t)
   '(lsp-ui-doc-header nil)
   '(lsp-ui-doc-include-signature t)
   '(lsp-ui-doc-max-width 150)
   '(lsp-ui-doc-position 'top)
   '(lsp-ui-doc-use-childframe t)
   '(lsp-ui-doc-use-webkit nil)
   '(lsp-ui-sideline-enable nil)
   '(lsp-ui-sideline-show-code-actions nil)
   '(lsp-ui-sideline-show-diagnostics nil)
   '(lsp-ui-sideline-show-hover t)
   '(lsp-ui-sideline-show-symbol nil)
   '(lsp-ui-sideline-update-mode 'point))

  (straight-use-package 'lsp-ui)

  (general-def '(motion insert emacs)
   "C-f" 'scroll-down-lsp-ui)

  ;; Disable underlines in lsp-ui-doc child frames
  (custom-set-faces '(nobreak-space ((t nil))))

  (defun scroll-down-lsp-ui ()
    "Enable scrolling documentation child frames when using lsp-ui-doc-glance"
    (interactive)
    (if (lsp-ui-doc--frame-visible-p)
        (let ((kmap (make-sparse-keymap)))
          (define-key kmap (kbd "q")
            '(lambda ()
               (interactive)
               (lsp-ui-doc-unfocus-frame)
               (setq overriding-terminal-local-map nil)
               (setq which-key-show-transient-maps t)))
          (setq which-key-show-transient-maps nil)
          (setq overriding-terminal-local-map kmap)
          (lsp-ui-doc-focus-frame)))
    (evil-scroll-page-down 1))
#+END_SRC
*** Notes
**** Random Notes
https://github.com/d12frosted/homebrew-emacs-plus#emacs-27-and-emacs-28-options
    Installed Emacs 28 via homebrew using the options to include jansson (faster lsp json) and xwidgets
    for opening browsers within emacs. I haven't managed to make xwidgets browser work yet. Issue 202 suggests
    it might be Emacs 27-only as of July 2020. Try again some other time. See system-configuration-options.

homepage
    overview
        lsp-ivy: workspace functions
    setup:
        installation: see use-package example
        performance: Describes various steps to improve and test performance. This is the first page you should visit before and after
                     installation, as json serialization needs to be included at compile time. Some steps are already configured in my
                     init.el. The non-MS Python language server is noted as being particularly slow.
                     lsp-diagnose
                     Reporting performance issues
        additional settings: See section on formatting, which is limited to tab spacing
    settings:
        *lsp-log* buffer
        lsp-enable-snippet
        lsp-auto-guess-root
        lsp-session-file
        lsp-eldoc-render-all
        lsp-eldoc-enable-hover
        lsp-enable-xref
        lsp-diagnostic-package
        lsp-enable-indentation
        lsp-enable-on-type-formatting
        lsp-before-save-edits
        lsp-enable-imenu
        lsp-imenu*
        lsp-response-timeout
        lsp-server-trace
        lsp-semantic-highlighting
        lsp-signature-auto-activate
        lsp-signature-render-documentation
    keybindings: start with s-l (s is cmd on macos)
    faq:
        servers generate their own error buffers
        install yasnippet for completion?
    troubleshooting:
        *lsp-log*
        lsp-describe-session shows project roots, started servers, and server capabilities

lsp-find-references
lsp-find-definition


lsp signature render documentation: signature documentation in eldoc
lsp eldoc enable hover: hover info
lsp eldoc render all: all hover info or just symbol

lsp ui doc alignment: window or frame (when lsp ui doc position is top or bottom)
lsp ui doc include signature: signature/type in frame
lsp ui doc position: top bottom or point
lsp ui doc use childframe

With yasnippet:
Parameter completion works as follows:
Autocompleting a function sometimes inserts it with all of its parmaeters
and the ability to insert a value for one, then jump to the next, and so on.
Not all functions do this. Those with two arguments do seem to.
Currently in nvim-r/coc.nvim (neovim), a simple tab after the opening parenthesis
will bring up a list of parameter names.
In contrast, the default settings in emacs go as follows. For the first named argument in python, begin to type the letter and the param will show up to complete. Follow its values by a comma (space optional),then press tab. The completion will now include and be limited to a list of parameters. Note that improper syntax such as name=, (i.e., with no value) will halt parameter completion. As you add arguments, positional or named, the completion list shrinks. It may exclude unused parameters if you don't use signature order, though perhaps that can be tweaked. See e.g. os.fdopen().
as you fill in named/positional parameters, your completion list shrinks.
***** Unbinding keys
;; Remap a command to the ignore command. This is the closest I have found to
;; unbinding a key by command name instead of key. Note that this doesn't
;; display as I expected in describe-variable.
;; (general-unbind :keymaps 'pdf-view-mode-map
;;   :with 'ignore
;;   [remap pdf-view-jump-to-register])
;; Same as above
;; (define-key pdf-view-mode-map [remap pdf-view-enlarge] 'ignore)
*** Issues
The VOC inventory .Rmd report was crashing lsp-r for unknown reasons. It could be the size of the file, latex, lsp-mode itself, the R language server, or something else. Note that without lsp-mode, to get full completion you will need to evaluate the loaded libraries in an iess-r buffer, as well as any objects you want completed. Test whether this has been fixed by issue 1383 sometime.
*** Tasks
**** TODO Finish setting up lsp package extensions,
**** TODO Test DAP for R and Python                            :ARCHIVE:
** helm
#+BEGIN_SRC emacs-lisp :tangle no
  ;;Dependencies for source build of helm
  (straight-use-package 'async)
  (straight-use-package 'popup)

  ;;Source installation, per helm recommendation
  ;;- https://github.com/emacs-helm/helm/wiki#from-source (installation)
  ;;- https://github.com/emacs-helm/helm/wiki#if-installed-from-source (configuration)
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/helm/") ; facultative when installed with make install
  (require 'helm-config)
  (my-leader
    "SPC" 'helm-M-x)
  (use-package helm-fzf
    :straight (helm-fzf  :host github :repo "ibmandura/helm-fzf"))
  From emacs-helm.sh
  (helm-mode 1)
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map [remap occur] 'helm-occur)
  (define-key global-map [remap list-buffers] 'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
  (define-key global-map [remap execute-extended-command] 'helm-M-x)
  (define-key global-map [remap apropos-command] 'helm-apropos)
  (unless (boundp 'completion-in-region-function)
    (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
    (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))
  (add-hook 'kill-emacs-hook #'(lambda () (and (file-exists-p "$CONF_FILE") (delete-file "$CONF_FILE"))))

  (use-package dash)
  (use-package f)
  (use-package s)
  (use-package helm-org-rifle)
#+END_SRC
** Terminal and shell scripts
#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package 'fish-mode)

  ;; Modified ansi-term to avoid read-from-minibuffer prompt
  (setq explicit-shell-file-name "/usr/bin/fish")

  (defun clear-shell ()
    (interactive)
    (let ((old-max comint-buffer-maximum-size))
      (setq comint-buffer-maximum-size 0)
      (comint-truncate-buffer)
      (setq comint-buffer-maximum-size old-max)))

  (global-set-key  (kbd "\C-x c") 'clear-shell)

  ;; TODO: Throws an error on window. Commenting out in the meantime.

  ;; (defun ansi-term (program &optional new-buffer-name)
  ;;   "Start a terminal-emulator in a new buffer.
  ;; This is almost the same as `term' apart from always creating a new buffer,
  ;; and `C-x' being marked as a `term-escape-char'."
  ;; (interactive (list (or explicit-shell-file-name (getenv "ESHELL") shell-file-name)))

  ;;   ;; Pick the name of the new buffer.
  ;;   (setq term-ansi-buffer-name
  ;;     (if new-buffer-name
  ;;         new-buffer-name
  ;;       (if term-ansi-buffer-base-name
  ;;           (if (eq term-ansi-buffer-base-name t)
  ;;           (file-name-nondirectory program)
  ;;         term-ansi-buffer-base-name)
  ;;         "ansi-term")))

  ;;   (setq term-ansi-buffer-name (concat "*" term-ansi-buffer-name "*"))

  ;;   ;; In order to have more than one term active at a time
  ;;   ;; I'd like to have the term names have the *term-ansi-term<?>* form,
  ;;   ;; for now they have the *term-ansi-term*<?> form but we'll see...

  ;;   (setq term-ansi-buffer-name (generate-new-buffer-name term-ansi-buffer-name))
  ;;   (setq term-ansi-buffer-name (term-ansi-make-term term-ansi-buffer-name program))

  ;;   (set-buffer term-ansi-buffer-name)
  ;;   (term-mode)
  ;;   (term-char-mode)

  ;;   ;; Historical baggage.  A call to term-set-escape-char used to not
  ;;   ;; undo any previous call to t-s-e-c.  Because of this, ansi-term
  ;;   ;; ended up with both C-x and C-c as escape chars.  Who knows what
  ;;   ;; the original intention was, but people could have become used to
  ;;   ;; either.   (Bug#12842)
  ;;   (let (term-escape-char)
  ;;     ;; I wanna have find-file on C-x C-f -mm
  ;;     ;; your mileage may definitely vary, maybe it's better to put this in your
  ;;     ;; .emacs ...
  ;;     (term-set-escape-char ?\C-x))

  ;;   (switch-to-buffer term-ansi-buffer-name))
#+END_SRC
** file browsers
Use ranger for general file browsing and treemacs as your workspace/project sidebar.
*** treemacs
Inspiration from https://github.com/lepisma/rogue.

To toggle treemacs, use C-\. To switch to a treemacs window, use C-|. You can use normal windmove commands to move out of the window, just not in, per the current setting of ~treemacs-is-never-other-window~. The upside of this is that, e.g., delete-other-windows ignores treemacs.

_If general-def isn't working, use general-define-key as done below._
#+BEGIN_SRC emacs-lisp :tangle no

  ;; Customize node was showing nothing when expanded. Literally empty space. Set here instead.
  ;; To see other values for this setting, press "o" over a file node in treemacs.
  (setq treemacs-default-visit-action 'treemacs-visit-node-ace)

  (customize-package
   '(treemacs-filewatch-mode t)
   '(treemacs-follow-mode t)
   '(treemacs-fringe-indicator-mode t)
   '(treemacs-git-mode 'deferred)
   '(treemacs-is-never-other-window t)
   '(treemacs-user-mode-line-format 'none)
   '(treemacs-workspace-switch-cleanup 'all))

  (straight-use-package 'treemacs)
  (require 'treemacs)

  (add-hook 'treemacs-mode (lambda () (display-line-numbers-mode -1)))

  (autoload 'treemacs-load-theme "treemacs-themes")
  (load "doom-themes-ext-treemacs") ; See treemacs-create-theme declarations
  (treemacs-load-theme "doom-colors")

  (general-define-key :keymaps '(motion insert emacs)
    "C-\\" 'treemacs
    "C-|" 'treemacs-select-window)

  (general-define-key :keymaps 'my/files-map
    "p" '(:keymap treemacs-project-map)
    "w" '(:keymap treemacs-workspace-map))

  (straight-use-package 'treemacs-evil)
  (require 'treemacs-evil)
#+END_SRC

*** TODO Find a way to use :wk for treemacs project and workspace (without interfering with descriptoin of hydra-window)
*** TODO Find a repository of treemacs themes. They seem hard to find on their own, disconnected from the rest of the repositories that contain theme code. In particular, I like the rogue spacing and simple icons (repos, folders, text files, and code files).
*** TODO Find a way to commit different ~/.emacs.d/.cache/treemacs-persist for different computers.
*** TODO Check out integration of treemacs with org-store-link
*** TODO Any compelling reason to use treemacs-projectile?
*** TODO Checkout  magit and treemacs-magit.

*** ranger
**** TODO Ranger launches in ansi-term but opens files in nano(?). Find a way to integrate it so you can open files in the buffer occupied by ansi-term/ranger instead, then replace deer.
** org dot
See https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html
See org-redisplay-inline-images for dot src blocks
#+begin_src dot :file custom.png :cmdline -Kdot -Tpng
#+end_src
#+begin_src emacs-lisp :tangle no
;; See https://stackoverflow.com/questions/26330363/how-do-i-get-a-list-of-functions-defined-in-an-emacs-lisp-file
;; Only recognizes non-void symbols in previously loaded files.

;; (with-current-buffer (find-file-noselect this-file)
(defun insert-declarations-in-scratch (dec buffer)
  "Copy the symbol names of declarations like defun"
  (let (declarations start label node)
    (with-current-buffer buffer
      (save-excursion
        (save-restriction
          (save-match-data
            (widen)
            (goto-char (point-min))
            (while (re-search-forward (format "^(%s " dec) nil t)
              (setq start (point)) ; Point is before the symbol
              (re-search-forward "[ )]") ; Point is after the space or closing paren
              (setq node (+ (length result) (length declarations)))
              (setq label (buffer-substring-no-properties start (- (point) 1)))
              (push (list node label) declarations))))))
      declarations))

(defun insert-all-declarations-in-scratch ()
  (let ((all (list "defvar" "defmacro" "defcustom" "defun" "defsubst" "declare-function")) ; Definitions
        (buffer (ivy-read "Buffer to read:" (mapcar 'buffer-name (buffer-list)))) ; Buffer to read
        result) ; Alist of definition keys and defined values
    (dolist (dec all result)
      ;; (push (list dec (insert-declarations-in-scratch dec buffer)) result))
      (setq result (append (insert-declarations-in-scratch dec buffer) result)))
    (with-current-buffer "*scratch*"
      (erase-buffer)
      (insert (format "digraph {\n\n"))
      (dolist (elem result)
        (print elem)
        (insert (format "%d [label=\"%s\"]\n" (car elem) (cadr elem))))
      (insert (format "}")))
    result))
#+end_src
* random code
#+begin_src emacs-lisp
  ;; Returns the Unicode general category of a character
  (get-char-code-property ?\u0020 'general-category)
  ;; \cc can do a regex search for category c

  (defun test ()
    "Return code point of char under point. Must be run via M-S-:"
    (interactive)
    (encode-char (char-after) 'ucs))

  (char-to-string ?\u22b9)
  ;; ⊹ ; (test) with point over character ⇒ 22b9
#+end_src
To replace unicode characters, see https://superuser.com/questions/504799/unicode-in-an-emacs-regular-expression
#+begin_src emacs-lisp
(use-package jupyter
  :config
  (pcase system-type
    ('gnu/linux
     (add-to-list 'exec-path "/home/jkroes/.local/bin") ;; path to jupyter
     (setq python-shell-interpreter "python3.6"))))

  (add-to-list 'exec-path "c:/Users/jkroes/Documents/Python") ;; interpreter
  (add-to-list 'exec-path "c:/Users/jkroes/Documents/Python/Scripts") ;; pip
  (setenv "PATH" (concat "C:/Users/jkroes/Documents/Python"
                         "c:/Users/jkroes/Documents/Python/Scripts"
                         (getenv "PATH")))) ;; Shell path to interpreter and pip

;; (general-create-definer my-definer
;;   :states '(motion insert emacs)
;;   :prefix "SPC"
;;   :non-normal-prefix (general-chord "fd"))
;; https://sam217pa.github.io/2016/09/23/keybindings-strategies-in-emacs/
;; (use-package key-chord
;;   :config
;;   (key-chord-mode 1))

;;; Further reading:

;; https://dev.to/huytd/emacs-from-scratch-1cg6
;; https://www.reddit.com/r/emacs/comments/2edbau/what_are_some_great_emacsd_examples/
;; https://github.com/caisah/emacs.dz
;; https://emacs.sexy/#resources
;; https://www.reddit.com/r/emacs/comments/6s5470/useful_packages/
;; https://github.com/emacs-tw/awesome-emacs
;; https://github.com/MilesMcBain/esscss
;; https://www.masteringemacs.org/about

;;; Evil
;;https://github.com/noctuid/evil-guide
;;https://raw.githubusercontent.com/emacs-evil/evil/master/doc/evil.pdf
;;evil-tutor-start
;;https://www.emacswiki.org/emacs/Evil
;;https://emacs.stackexchange.com/questions/12175/instructions-on-how-to-work-with-evil-mode (see config)
;;https://github.com/emacs-evil/evil-collection
;;https://www.linode.com/docs/tools-reference/tools/emacs-evil-mode/
;;https://github.com/noctuid/evil-guide/issues/11
;;https://github.com/emacs-evil/evil/blob/3766a521a60e6fb0073220199425de478de759ad/evil-maps.el

;;; Counsel
;; https://oremacs.com/swiper/
;; https://github.com/abo-abo/swiper/wiki
;; https://github.com/abo-abo/swiper/blob/master/ivy-hydra.el
;; https://github.com/abo-abo/hydra/wiki/hydra-ivy-replacement
;; https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html#fn.1
;; See ivy info node
;; Relevant maps:
;; minibuffer maps
;; ivy-minibuffer-map
;; counsel command maps (e.g. counsel-find-file-map)
;;  NOTE: '`' shows ?? as the binding. See counsel.el,
;;  counsel-find-file-map, where '`' is bound to a call
;;  to ivy-make-magic-action with arg "b", equiv. to
;;  M-o b
;; Investigate actions for each counsel command
;; E.g. M-o within counsel-M-x contains a jump to def action and
;; a help action
;; Navigation:
;;  counsel-outline (navigates comments)
;; Completion:
;;  indent-for-symbol
;;  counsel-company
;;  counsel-jedi
;; counsel-set-variable (defcustom completion)
;; ivy-push-view (https://oremacs.com/2016/06/27/ivy-push-view/)
;; ivy-pop-view

;;; ESS
;; ess-show-traceback, ess-show-call-stack, ess-parse-errors (for syntax errors)
;; ESS maps:
;; ess-help-mode-map
;; inferior-ess-mode-map
;; ess-r-help-mode-map
;; ess-watch-mode-mape
;; ess-rdired-mode-map
;; ess-electric-selection-map
;; inferior-ess-mode-map
;; ess-mode-map
;; inferior-ess-r-mode-map
;; electric-indent-mode
;; https://github.com/MilesMcBain/esscss
#+end_src
* Resources
** [[https://www.gnu.org/software/emacs/manual/][Manuals]]
*** [[https://www.gnu.org/software/emacs/manual/emacs.html][Emacs]]
*** [[https://www.gnu.org/software/emacs/manual/elisp.html][elisp]]
*** [[https://www.gnu.org/software/emacs/manual/eintr.html][An Introduction to Programming in Emacs Lisp]]
* Topics
** [[id:691EDB09-EFDD-4DAE-9DA6-85E71998112B][Emacs-encoding]]
#+begin_quote
When Emacs reads a file, it determines the encoding, reads the file, decodes it into an internal representation, and stores the coding-system used in a variable to be used when saving the file. When saving, the buffer is encoded using the stored coding-system and written to the file again.
#+end_quote

The following was derived by decoding the keybindings mentioned in the source into their respective commands:
*** Set encoding to use when saving a buffer (eventually)
~M-x set-buffer-file-coding-system <encoding>~

Note that this does not immediately save the buffer to file with the new encoding but does work with ~save-buffer~ by marking the buffer as modified!

This command's documentation mentions that you can alternativley set the variable ~buffer-file-coding-system~.
*** Save buffer as encoding (immediately)
~M-x universal-coding-system-argument <encoding> RET M-x write-file~

Note the use of ~write-file~ in lieu of ~save-buffer~.
*** Read a file with encoding
~M-x universal-coding-system-argument <encoding> RET M-x find-file~
*** Reload a buffer with a different encoding
~M-x revert-buffer-with-coding-system <encoding>~

Note that this will also potentially save a buffer to file with a new encoding, since it changes the value of ~buffer-file-coding-system~.
**** Line endings (EOL)
If you see ~(DOS)~ on the far left of the modeline, you have potentially opened a file with DOS-style line endings.

One way to convert files between DOS and Unix line endings for the same encoding (e.g., UTF-8) is to simply save the buffer with the desired encoding, and the line endings will be converted if ~inhibit-eol-conversion~ is ~nil~.

Another is to use ~revert-buffer-with-coding-system~ to reload the buffer with the encoding in ~-unix~ (e.g., ~utf-8-unix)~. This will treat newlines as the EOL character, displaying carriage returns visibly as ~^M~. If you then save the file (or use ~save-buffer~ after a modification!), the lines will be converted automatically. Some users seem unaware of the automatic line conversion and recommend ~:%s/\r//~ to remove the carriage returns before saving. In my own testing, this has been unncessary.
*** See Also
https://www.gnu.org/software/emacs/manual/html_node/emacs/Recognize-Coding.html
** [[info:elisp#Regular Expressions][Regular Expressions]]
*** re-builder
*** Syntax of Regular Expressions
**** TODO Finish taking notes on emacs regular expressions
**** Special Characters in Regular Expressions
***** '.'
Any single character except a newline
***** '\ast'
A postfix operator to match the preceding regex as many times as possible, including zero. If a match is found, the matcher proceeds with matching the rest of the pattern. If that fails, backtracking occurs by discarding part of the previous match in the hopes that the rest of the regex will then match.

E.g., matching 'ca*ar' against 'caaar', the following occurs:
1. 'a\ast' matches 'aaa'; the regex fails because 'ar' can't match 'r'.
2. 'a\ast' next matches 'aa'; the regex succeeds.
***** '\plus'
Like '\ast' but requires at least one match of the preceding regex.
***** '?'
Like '\ast' but requires no more than one match. E.g., 'ca?r' matches 'car' or 'cr'.
***** '\ast?', '\plus?', '??'
Non-greedy variants of '\ast', '\plus', and '?'. That is, they match the smallest possible substring instead of the largest one.

E.g., 'c[ad]\ast{}a' matches all of the string 'cdaaada', 'c[ad]\ast{}?a' matches just 'cda', and '[ad]\ast{}?' matches 'd'.
***** '[...]'
The brackets are a /character alternative/ that matches any of the characters specified. Inside you can match on any of a single character, a character range, or a named character class.

Special characters within a character alternative differ from the usual regex special characters. To use them literally:
1. ']' must be the first character.
2. '^' (complement) cannot be the first character.
3. '-' (ranges) can be the first or last character, but last is preferred by the manual.

The following behavior is specific to Emacs:
1. If ~case-fold-search~ is non-nil, '[a-z]' matches lower and uppercase letters.
2. Ranges are not affected by locale.
3. If the lower bound of a range is greater than its upper bound, the range is empty. E.g., '[^z-a]' matches no character and '[^z-a]' matches any character, including newline.

'-' can be used to construct a range between almost any characters but should be limited to ASCII or Unicode escapes, since the latter specify the code point range.

In practice, most ']' that occur in regular expressions close a character alternative and hence are special. However, occasionally a regular expression may try to match a complex pattern of literal '[' and ']'. In such situations, it sometimes may be necessary to carefully parse the regexp from the start to determine which square brackets enclose a character alternative. For example, '[^][]]' consists of the complemented character alternative '[^][]' (which matches any single character that is not a square bracket), followed by a literal ']'.
***** '[^...]'
/Complemented character alternative/. Matches any character except the ones specified. The character following the '^' is considered the first specified character, so ']' and '-' are not special in that position.

Can match a newline unless newline is mentioned as one of the characters not to match (how to do this is not mentioned).

One useful example is '[^[:ascii:]]'.
***** '^'
When matching a buffer, ‘^’ matches the empty string, but only at the beginning of a line in the text being matched (or the beginning of the accessible portion of the buffer). Otherwise it fails to match anything. Thus, ‘^foo’ matches a ‘foo’ that occurs at the beginning of a line.

When matching a string instead of a buffer, ‘^’ matches at the beginning of the string or after a newline character.

For historical compatibility reasons, ‘^’ can be used only at the beginning of the regular expression, or after ‘\(’, ‘\(?:’ or ‘\|’.
***** '$'
Like ‘^’ but matches only at the end of a line (or the end of the accessible portion of the buffer). When matching a string instead of a buffer, ‘$’ matches at the end of the string or before a newline character.

For historical compatibility reasons, ‘$’ can be used only at the end of the regular expression, or before ‘\)’ or ‘\|’.
***** '\'
Quotes special characters and introduces special constructs.

Note that ‘\’ also has special meaning in the read syntax of Lisp strings, and must be quoted with ‘\’. For example, the regular expression that matches the ‘\’ character is ‘\\’. To write a Lisp string that contains the characters ‘\\’, Lisp syntax requires you to quote each ‘\’ with another ‘\’. Therefore, the read syntax for a regular expression matching ‘\’ is "\\\\".
**** [[info:elisp#Char Classes][Char Classes]]
Of note are the following classes:
***** '[:nonascii:]'
***** '[:unibyte:]'
***** '[:multibyte:]'
***** '[:print:]'
A visible character or space
***** '[:space:]'
Typically equivalent to tabs, carriage return, newline (line feed), vertical tab, and form feed
**** Backslash Constructs in Regular Expressions
***** '\|'
An alternative. E.g., 'foo\|bar' matches either 'foo' or 'bar'. Applies to the largest possible surrounding expression, and '\(...\)' can be used to limit its scope.
*****
** Faces (emacs 14.8; elisp 39.12)
Faces are collections of graphical attributes for displaying text (e.g., font and foreground color). Faces also control text display in buffers and otehr parts of the frame such as the mode line through the ~face~ text property. Property lists of attributes like ~(:foreground "red")~ are anonymous faces, but named faces are more common.

https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html

Most faces define different attirbutes differently on light and dark backgrounds.

Colors have unique names and RGB triplet (#RRGGBB) hex numbers.

There are a number of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Frame-Parameters.html][standard faces]] such as ~default~ (no other face, frame bg color), ~bold~, ~italic~, ~bold-italic~, ~underline~, ~fixed-pitch~ (fixed-with font), ~variable-pitch~, highlight faces, and faces specific to parts of the frame such as ~mode-line~, ~fringe~, ~minibuffer-prompt~, and ~cursor~.

Font Lock mode assigns faces to ("fontifies") buffer text. Major modes tell Font Lock mode which text to fontify (e.g., comments, strings, function names in a programming major mode). This is done by specially named faces (~M-x customize-group RET font-lock-faces RET~). To extend this mode for specific patterns such as 'FIXME:' within C comments:
#+begin_src emacs-lisp
(add-hook 'c-mode-hook
          (lambda ()
           (font-lock-add-keywords nil
            '(("\\<\\(FIXME\\):" 1
               font-lock-warning-face t)))))
#+end_src
See also [[info:elisp#Search-based Fontification][elisp#Search-based Fontification]]. Fontification is done only as text is made visible (just-in-time or JIT). JIT Lock can be customized by the group ~jit-lock~ to e.g. fontify while idle.
*** Functions and Commands
**** counsel-faces / counsel-describe-face
**** counsel-color-emacs
**** set-face-foreground
**** set-face-background
**** text-scale-increase
**** text-scale-decrease
**** C-u 0 text-scale-adjust
**** global-font-lock-mode / font-lock-mode
**** (un)highlight-regexp
**** (un)highlight-phrase
**** (un)highlight-symbol-at-point
**** fringe-mode
See [[info:emacs#Fringes][emacs#Fringes]].
* Installation
** WSL RDP
The ITB-approved way of connecting to a graphical Emacs instance running in WSL.

Follow these [[https://www.nextofwindows.com/how-to-enable-wsl2-ubuntu-gui-and-use-rdp-to-remote][instructions]], but install xfce4 instead of kubuntu-desktop. Then follow the advice of commenter Julius:
1. ~sudo /etc/init.d/xrdp stop~
2. ~sudo vim /etc/xrdp/startwm.sh~
3. Comment out the bottom two lines.
4. Below these lines, add ~startxfce4~.
5. ~sudo /etc/init.d/xrdp start~
** emacs
*** [[info:efaq#Installing Emacs][From source]]
To get the latest version, install from alpha.gnu.org/gnu/emacs/pretest. If installing .xz instead of .gz, drop the -g flag.
*** [[https://launchpad.net/~kelleyk/+archive/ubuntu/emacs][Ubuntu]]
#+BEGIN_SRC sh :tangle no
  sudo add-apt-repository ppa:kelleyk/emacs
  sudo apt-get update
#+END_SRC
Alternatively: https://github.com/hubisan/emacs-wsl#install-ubuntu-2004, possibly with more build flags than included in the link. E.g., some lsp users recommend the flag ~with-modules~.
*** MacOS (M1)
Run ~brew install emacs-plus@28~. In the past, this broke a number of packages:
https://github.com/hlissner/doom-emacs/issues/4534

If you need to install with options, see the output of ~brew options emacs-plus@28~.
** hack font
*** [[https://github.com/source-foundry/Hack#quick-installation][Manual]]
*** Ubuntu
#+BEGIN_SRC sh :tangle no
  sudo apt-get update
  sudo apt-get install fonts-hack
#+END_SRC
** counsel
*** ripgrep (rg)
*** fzf
** projectile
*** fd-find (fdfind)
*** ripgrep (rg)
** treemacs
Run ~(all-the-icons-install-fonts)~
Doom theme should already be present in .emacs.d/lisp.
** ripgrep
Installation may fail on WSL with an error about /usr/.crates2/json, which has been documented: https://github.com/BurntSushi/ripgrep/issues/1562. The fix is: https://bugs.launchpad.net/ubuntu/+source/rust-bat/+bug/1868517/comments/32.
