(undo-tree-save-format-version . 1)
"5601da6558438586a8b5efd23b9ead3026aa2e94"
[nil nil nil nil (25266 23263 31358 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -1459) (1 . 1460) (t . -1)) nil (25266 23263 31357 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1)) nil (25266 23263 31352 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . 1459) (undo-tree-id36 . -2) (1458 . 1462) (t 25266 23263 33634 451000)) nil (25266 23394 794029 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3374 . 3375) (nil fontified nil 1460 . 3375) (1460 . 3375)) nil (25266 23394 794027 0) 0 nil])
([nil nil ((3375 . 3376)) nil (25266 23394 794026 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . 3375) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (3374 . 3378)) nil (25266 23394 794025 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6540 . 6541) (nil fontified nil 3376 . 6541) (3376 . 6541)) nil (25266 23394 794010 0) 0 nil])
([nil nil ((#("

" 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t)) . 6541)) nil (25266 23406 910823 0) 0 nil])
([nil nil ((#("(defmacro map! (&rest rest)
  \"A convenience macro for defining keybinds, powered by `general'.

If evil isn't loaded, evil-specific bindings are ignored.

Properties
  :leader [...]                   an alias for (:prefix doom-leader-key ...)
  :localleader [...]              bind to localleader; requires a keymap
  :mode [MODE(s)] [...]           inner keybinds are applied to major MODE(s)
  :map [KEYMAP(s)] [...]          inner keybinds are applied to KEYMAP(S)
  :prefix [PREFIX] [...]          set keybind prefix for following keys. PREFIX
                                  can be a cons cell: (PREFIX . DESCRIPTION)
  :prefix-map [PREFIX] [...]      same as :prefix, but defines a prefix keymap
                                  where the following keys will be bound. DO NOT
                                  USE THIS IN YOUR PRIVATE CONFIG.
  :after [FEATURE] [...]          apply keybinds when [FEATURE] loads
  :textobj KEY INNER-FN OUTER-FN  define a text object keybind pair
  :when [CONDITION] [...]
  :unless [CONDITION] [...]

  Any of the above properties may be nested, so that they only apply to a
  certain group of keybinds.

States
  :n  normal
  :v  visual
  :i  insert
  :e  emacs
  :o  operator
  :m  motion
  :r  replace
  :g  global  (binds the key without evil `current-global-map')

  These can be combined in any order, e.g. :nvi will apply to normal, visual and
  insert mode. The state resets after the following key=>def pair. If states are
  omitted the keybind will be global (no emacs state; this is different from
  evil's Emacs state and will work in the absence of `evil-mode').

  These must be placed right before the key string.

  Do
    (map! :leader :desc \\\"Description\\\" :n \\\"C-c\\\" #'dosomething)
  Don't
    (map! :n :leader :desc \\\"Description\\\" \\\"C-c\\\" #'dosomething)
    (map! :leader :n :desc \\\"Description\\\" \\\"C-c\\\" #'dosomething)\"
  (doom--map-process rest))

(defun doom--map-process (rest)
  (let ((doom--map-fn doom--map-fn)
        doom--map-state
        doom--map-forms
        desc)
    (while rest
      (let ((key (pop rest)))
        (cond ((listp key)
               (doom--map-nested nil key))

              ((keywordp key)
               (pcase key
                 (:leader
                  (doom--map-commit)
                  (setq doom--map-fn 'doom--define-leader-key))
                 (:localleader
                  (doom--map-commit)
                  (setq doom--map-fn 'define-localleader-key!))
                 (:after
                  (doom--map-nested (list 'after! (pop rest)) rest)
                  (setq rest nil))
                 (:desc
                  (setq desc (pop rest)))
                 (:map
                  (doom--map-set :keymaps `(quote ,(doom-enlist (pop rest)))))
                 (:mode
                  (push (cl-loop for m in (doom-enlist (pop rest))
                                 collect (intern (concat (symbol-name m) \"-map\")))
                        rest)
                  (push :map rest))
                 ((or :when :unless)
                  (doom--map-nested (list (intern (doom-keyword-name key)) (pop rest)) rest)
                  (setq rest nil))
                 (:prefix-map
                  (cl-destructuring-bind (prefix . desc)
                      (let ((arg (pop rest)))
                        (if (consp arg) arg (list arg)))
                    (let ((keymap (intern (format \"doom-leader-%s-map\" desc))))
                      (setq rest
                            (append (list :desc desc prefix keymap
                                          :prefix prefix)
                                    rest))
                      (push `(defvar ,keymap (make-sparse-keymap))
                            doom--map-forms))))
                 (:prefix
                  (cl-destructuring-bind (prefix . desc)
                      (let ((arg (pop rest)))
                        (if (consp arg) arg (list arg)))
                    (doom--map-set (if doom--map-fn :infix :prefix)
                                   prefix)
                    (when (stringp desc)
                      (setq rest (append (list :desc desc \"\" nil) rest)))))
                 (:textobj
                  (let* ((key (pop rest))
                         (inner (pop rest))
                         (outer (pop rest)))
                    (push `(map! (:map evil-inner-text-objects-map ,key ,inner)
                                 (:map evil-outer-text-objects-map ,key ,outer))
                          doom--map-forms)))
                 (_
                  (condition-case _
                      (doom--map-def (pop rest) (pop rest)
                                     (doom--map-keyword-to-states key)
                                     desc)
                    (error
                     (error \"Not a valid `map!' property: %s\" key)))
                  (setq desc nil))))

              ((doom--map-def key (pop rest) nil desc)
               (setq desc nil)))))

    (doom--map-commit)
    (macroexp-progn (nreverse (delq nil doom--map-forms)))))
" 0 30 (fontified t) 30 500 (fontified t face font-lock-string-face) 500 549 (fontified t face font-lock-string-face) 549 1049 (fontified t face font-lock-string-face) 1049 1120 (fontified t face font-lock-string-face) 1120 1620 (fontified t face font-lock-string-face) 1620 1621 (fontified t face font-lock-string-face) 1621 1886 (fontified t face font-lock-string-face) 1886 1887 (fontified t) 1887 1915 (fontified t) 1915 1916 (fontified t) 1916 1948 (fontified t) 1948 2416 (fontified t) 2416 2448 (fontified t) 2448 2478 (fontified t) 2478 2938 (fontified t) 2938 2944 (fontified t face font-lock-string-face) 2944 2978 (fontified t) 2978 3419 (fontified t) 3419 3439 (fontified t face font-lock-string-face) 3439 3478 (fontified t) 3478 3482 (fontified t) 3482 3982 (fontified t) 3982 4019 (fontified t) 4019 4161 (fontified t) 4161 4163 (fontified t face font-lock-string-face) 4163 4519 (fontified t) 4519 4543 (fontified t) 4543 4827 (fontified t) 4827 4860 (fontified t face font-lock-string-face) 4860 5043 (fontified t) 5043 5080 (fontified t) 5080 5081 (rear-nonsticky t fontified t)) . 1460) (undo-tree-id44 . -5081) (undo-tree-id45 . -1916) (undo-tree-id46 . -5080) (undo-tree-id47 . -1621) (undo-tree-id48 . -1819) (undo-tree-id49 . 3262) (undo-tree-id50 . -1916) (undo-tree-id51 . -5079) (undo-tree-id52 . -1916) (undo-tree-id53 . -4103) (undo-tree-id54 . -1819) (undo-tree-id55 . -5081) (undo-tree-id56 . -1916) (undo-tree-id57 . -1916) (undo-tree-id58 . -1621) (undo-tree-id59 . -1819) (undo-tree-id60 . -1754) (undo-tree-id61 . -1621) (undo-tree-id62 . -1819) (undo-tree-id63 . -1819) (undo-tree-id64 . -1621) (undo-tree-id65 . -1621) (undo-tree-id66 . -1819) (undo-tree-id67 . -1819) (undo-tree-id68 . -1819) (undo-tree-id69 . -1819) (undo-tree-id70 . -1819) (undo-tree-id71 . -1819) (undo-tree-id72 . -1819) (undo-tree-id73 . -1819) (undo-tree-id74 . -1819) (undo-tree-id75 . -1819) (undo-tree-id76 . -1819) (undo-tree-id77 . -1819) (undo-tree-id78 . -1819) (undo-tree-id79 . -1819) (undo-tree-id80 . -1819) (undo-tree-id81 . -1819) (undo-tree-id82 . -1819) (undo-tree-id83 . -1819) (undo-tree-id84 . -1819) (undo-tree-id85 . -1819) (undo-tree-id86 . -1819) (undo-tree-id87 . -1819) (undo-tree-id88 . -1819) (undo-tree-id89 . -1819) (undo-tree-id90 . -1819) (undo-tree-id91 . -1819) (undo-tree-id92 . -1819) (undo-tree-id93 . -1819) (undo-tree-id94 . -1819) (undo-tree-id95 . -1621) (undo-tree-id96 . -1819) (undo-tree-id97 . -1819) (undo-tree-id98 . -1819) (undo-tree-id99 . -1819) (undo-tree-id100 . -1819) (undo-tree-id101 . -1819) (undo-tree-id102 . -1819) (undo-tree-id103 . -1819) (undo-tree-id104 . -1819) (undo-tree-id105 . -1819) (undo-tree-id106 . -1819) (undo-tree-id107 . -1819) (undo-tree-id108 . -1746) (undo-tree-id109 . -1819) (undo-tree-id110 . -1819) (undo-tree-id111 . -1746) (undo-tree-id112 . -1819) (undo-tree-id113 . -1819) (undo-tree-id114 . -1819) (undo-tree-id115 . -1819) (undo-tree-id116 . -1819) (undo-tree-id117 . -1819) (undo-tree-id118 . -1819) (undo-tree-id119 . -1819) (undo-tree-id120 . -1819) (undo-tree-id121 . -1819) (undo-tree-id122 . -1819) (undo-tree-id123 . -1819) (undo-tree-id124 . -1819) (undo-tree-id125 . -1819) (undo-tree-id126 . -1819) (undo-tree-id127 . -1819) (undo-tree-id128 . -1818) (undo-tree-id129 . -1818) (undo-tree-id130 . -1818) (undo-tree-id131 . -1818) (undo-tree-id132 . -1818) (undo-tree-id133 . -1818) (undo-tree-id134 . -1818) (undo-tree-id135 . -1818) (undo-tree-id136 . -1818) (undo-tree-id137 . -1818) (undo-tree-id138 . -1818) (undo-tree-id139 . -1746) (undo-tree-id140 . -1818) (undo-tree-id141 . -1818) (undo-tree-id142 . -1818) (undo-tree-id143 . -1818) (undo-tree-id144 . -1818) (undo-tree-id145 . -1818) (undo-tree-id146 . -1818) (undo-tree-id147 . -1818) (undo-tree-id148 . -1818) (undo-tree-id149 . -1818) (undo-tree-id150 . -1818) (undo-tree-id151 . -1818) (undo-tree-id152 . -1818) (undo-tree-id153 . -1818) (undo-tree-id154 . -1818) (undo-tree-id155 . -1818) (undo-tree-id156 . -1818) (undo-tree-id157 . -1818) (undo-tree-id158 . -1818) (undo-tree-id159 . -1818) (undo-tree-id160 . -1818) (undo-tree-id161 . -1818) (undo-tree-id162 . -1818) (undo-tree-id163 . -1818) (undo-tree-id164 . -1818) (undo-tree-id165 . -1818) (undo-tree-id166 . -1818) (undo-tree-id167 . -1818) (undo-tree-id168 . -1818) (undo-tree-id169 . -1818) (undo-tree-id170 . -1818) (undo-tree-id171 . -1818) (undo-tree-id172 . -1818) (undo-tree-id173 . -1818) (undo-tree-id174 . -1818) (undo-tree-id175 . -1818) (undo-tree-id176 . -1818) (undo-tree-id177 . -1818) (undo-tree-id178 . -1818) (undo-tree-id179 . -1818) (undo-tree-id180 . -1818) (undo-tree-id181 . -1752) (undo-tree-id182 . -1818) (undo-tree-id183 . -1746) (undo-tree-id184 . -1752) (undo-tree-id185 . -1752) (undo-tree-id186 . -1752) (undo-tree-id187 . -1752) (undo-tree-id188 . -1752) (undo-tree-id189 . -1752) (undo-tree-id190 . -1752) (undo-tree-id191 . -1752) (undo-tree-id192 . -1752) (undo-tree-id193 . -1752) (undo-tree-id194 . -1752) (undo-tree-id195 . -1752) (undo-tree-id196 . -1752) (undo-tree-id197 . -1752) (undo-tree-id198 . -1752) (undo-tree-id199 . -1744) (undo-tree-id200 . -1752) (undo-tree-id201 . -1746) (undo-tree-id202 . -1744) (undo-tree-id203 . -1744) (undo-tree-id204 . -1744) (undo-tree-id205 . -1744) (undo-tree-id206 . -1744) (undo-tree-id207 . -1744) (undo-tree-id208 . -1744) (undo-tree-id209 . -1744) (undo-tree-id210 . -1678) (undo-tree-id211 . -1744) (undo-tree-id212 . -1680) (undo-tree-id213 . -1678) (undo-tree-id214 . -1678) (undo-tree-id215 . -1678) (undo-tree-id216 . -1678) (undo-tree-id217 . -1678) (undo-tree-id218 . -1678) (undo-tree-id219 . -1678) (undo-tree-id220 . -1678) (undo-tree-id221 . -1674) (undo-tree-id222 . -1678) (undo-tree-id223 . -1675) (undo-tree-id224 . -1674) (undo-tree-id225 . -1674) (undo-tree-id226 . -1674) (undo-tree-id227 . -1674) (undo-tree-id228 . -1674) (undo-tree-id229 . -1674) (undo-tree-id230 . -1674) (undo-tree-id231 . -1674) (undo-tree-id232 . -1672) (undo-tree-id233 . -1674) (undo-tree-id234 . -1674) (undo-tree-id235 . -1672) (undo-tree-id236 . -1672) (undo-tree-id237 . -1672) (undo-tree-id238 . -1672) (undo-tree-id239 . -1672) (undo-tree-id240 . -1672) (undo-tree-id241 . -1672) (undo-tree-id242 . -1672) (undo-tree-id243 . -1621) (undo-tree-id244 . -1672) (undo-tree-id245 . -1622) (undo-tree-id246 . -1621) (undo-tree-id247 . -1621) (undo-tree-id248 . -1621) (undo-tree-id249 . -1621) (undo-tree-id250 . -1621) (undo-tree-id251 . -1621) (undo-tree-id252 . -1621) (undo-tree-id253 . -1621) (undo-tree-id254 . -1618) (undo-tree-id255 . -1621) (undo-tree-id256 . -1621) (undo-tree-id257 . -1618) (undo-tree-id258 . -1618) (undo-tree-id259 . -1618) (undo-tree-id260 . -1618) (undo-tree-id261 . -1618) (undo-tree-id262 . -1618) (undo-tree-id263 . -1618) (undo-tree-id264 . -1618) (undo-tree-id265 . -1541) (undo-tree-id266 . -1618) (undo-tree-id267 . -1554) (undo-tree-id268 . -1541) (undo-tree-id269 . -1541) (undo-tree-id270 . -1541) (undo-tree-id271 . -1541) (undo-tree-id272 . -1541) (undo-tree-id273 . -1541) (undo-tree-id274 . -1541) (undo-tree-id275 . -1541) (undo-tree-id276 . -1460) (undo-tree-id277 . -1541) (undo-tree-id278 . -1477) (undo-tree-id279 . -1460) (undo-tree-id280 . -1460) (undo-tree-id281 . -1460) (undo-tree-id282 . -1460) (undo-tree-id283 . -1460) (undo-tree-id284 . -1460) (undo-tree-id285 . -1460) (undo-tree-id286 . -1460) (undo-tree-id287 . -1379) (undo-tree-id288 . -1460) (undo-tree-id289 . -1396) (undo-tree-id290 . -1379) (undo-tree-id291 . -1379) (undo-tree-id292 . -1379) (undo-tree-id293 . -1379) (undo-tree-id294 . -1379) (undo-tree-id295 . -1379) (undo-tree-id296 . -1379) (undo-tree-id297 . -1379) (undo-tree-id298 . -1314) (undo-tree-id299 . -1379) (undo-tree-id300 . -1315) (undo-tree-id301 . -1314) (undo-tree-id302 . -1314) (undo-tree-id303 . -1314) (undo-tree-id304 . -1314) (undo-tree-id305 . -1314) (undo-tree-id306 . -1314) (undo-tree-id307 . -1314) (undo-tree-id308 . -1314) (undo-tree-id309 . -1312) (undo-tree-id310 . -1314) (undo-tree-id311 . -1314) (undo-tree-id312 . -1312) (undo-tree-id313 . -1312) (undo-tree-id314 . -1312) (undo-tree-id315 . -1312) (undo-tree-id316 . -1312) (undo-tree-id317 . -1312) (undo-tree-id318 . -1312) (undo-tree-id319 . -1312) (undo-tree-id320 . -1248) (undo-tree-id321 . -1312) (undo-tree-id322 . -1250) (undo-tree-id323 . -1248) (undo-tree-id324 . -1248) (undo-tree-id325 . -1248) (undo-tree-id326 . -1248) (undo-tree-id327 . -1248) (undo-tree-id328 . -1248) (undo-tree-id329 . -1248) (undo-tree-id330 . -1248) (undo-tree-id331 . -1234) (undo-tree-id332 . -1248) (undo-tree-id333 . -1236) (undo-tree-id334 . -1234) (undo-tree-id335 . -1234) (undo-tree-id336 . -1234) (undo-tree-id337 . -1234) (undo-tree-id338 . -1234) (undo-tree-id339 . -1234) (undo-tree-id340 . -1234) (undo-tree-id341 . -1234) (undo-tree-id342 . -1221) (undo-tree-id343 . -1234) (undo-tree-id344 . -1223) (undo-tree-id345 . -1221) (undo-tree-id346 . -1221) (undo-tree-id347 . -1221) (undo-tree-id348 . -1221) (undo-tree-id349 . -1221) (undo-tree-id350 . -1221) (undo-tree-id351 . -1221) (undo-tree-id352 . -1221) (undo-tree-id353 . -1206) (undo-tree-id354 . -1221) (undo-tree-id355 . -1208) (undo-tree-id356 . -1206) (undo-tree-id357 . -1206) (undo-tree-id358 . -1206) (undo-tree-id359 . -1206) (undo-tree-id360 . -1206) (undo-tree-id361 . -1206) (undo-tree-id362 . -1206) (undo-tree-id363 . -1206) (undo-tree-id364 . -1194) (undo-tree-id365 . -1206) (undo-tree-id366 . -1196) (undo-tree-id367 . -1194) (undo-tree-id368 . -1194) (undo-tree-id369 . -1194) (undo-tree-id370 . -1194) (undo-tree-id371 . -1194) (undo-tree-id372 . -1194) (undo-tree-id373 . -1194) (undo-tree-id374 . -1194) (undo-tree-id375 . -1181) (undo-tree-id376 . -1194) (undo-tree-id377 . -1183) (undo-tree-id378 . -1181) (undo-tree-id379 . -1181) (undo-tree-id380 . -1181) (undo-tree-id381 . -1181) (undo-tree-id382 . -1181) (undo-tree-id383 . -1181) (undo-tree-id384 . -1181) (undo-tree-id385 . -1181) (undo-tree-id386 . -1168) (undo-tree-id387 . -1181) (undo-tree-id388 . -1170) (undo-tree-id389 . -1168) (undo-tree-id390 . -1168) (undo-tree-id391 . -1168) (undo-tree-id392 . -1168) (undo-tree-id393 . -1168) (undo-tree-id394 . -1168) (undo-tree-id395 . -1168) (undo-tree-id396 . -1168) (undo-tree-id397 . -1155) (undo-tree-id398 . -1168) (undo-tree-id399 . -1157) (undo-tree-id400 . -1155) (undo-tree-id401 . -1155) (undo-tree-id402 . -1155) (undo-tree-id403 . -1155) (undo-tree-id404 . -1155) (undo-tree-id405 . -1155) (undo-tree-id406 . -1155) (undo-tree-id407 . -1155) (undo-tree-id408 . -1149) (undo-tree-id409 . -1155) (undo-tree-id410 . -1150) (undo-tree-id411 . -1149) (undo-tree-id412 . -1149) (undo-tree-id413 . -1149) (undo-tree-id414 . -1149) (undo-tree-id415 . -1149) (undo-tree-id416 . -1149) (undo-tree-id417 . -1149) (undo-tree-id418 . -1149) (undo-tree-id419 . -1147) (undo-tree-id420 . -1149) (undo-tree-id421 . -1149) (undo-tree-id422 . -1147) (undo-tree-id423 . -1147) (undo-tree-id424 . -1147) (undo-tree-id425 . -1147) (undo-tree-id426 . -1147) (undo-tree-id427 . -1147) (undo-tree-id428 . -1147) (undo-tree-id429 . -1147) (undo-tree-id430 . -1110) (undo-tree-id431 . -1147) (undo-tree-id432 . -1120) (undo-tree-id433 . -1110) (undo-tree-id434 . -1110) (undo-tree-id435 . -1110) (undo-tree-id436 . -1110) (undo-tree-id437 . -1110) (undo-tree-id438 . -1110) (undo-tree-id439 . -1110) (undo-tree-id440 . -1110) (undo-tree-id441 . -1045) (undo-tree-id442 . -1110) (undo-tree-id443 . -1046) (undo-tree-id444 . -1045) (undo-tree-id445 . -1045) (undo-tree-id446 . -1045) (undo-tree-id447 . -1045) (undo-tree-id448 . -1045) (undo-tree-id449 . -1045) (undo-tree-id450 . -1045) (undo-tree-id451 . -1045) (undo-tree-id452 . -1043) (undo-tree-id453 . -1045) (undo-tree-id454 . -1045) (undo-tree-id455 . -1043) (undo-tree-id456 . -1043) (undo-tree-id457 . -1043) (undo-tree-id458 . -1043) (undo-tree-id459 . -1043) (undo-tree-id460 . -1043) (undo-tree-id461 . -1043) (undo-tree-id462 . -1043) (undo-tree-id463 . -1015) (undo-tree-id464 . -1043) (undo-tree-id465 . -1017) (undo-tree-id466 . -1015) (undo-tree-id467 . -1015) (undo-tree-id468 . -1015) (undo-tree-id469 . -1015) (undo-tree-id470 . -1015) (undo-tree-id471 . -1015) (undo-tree-id472 . -1015) (undo-tree-id473 . -1015) (undo-tree-id474 . -987) (undo-tree-id475 . -1015) (undo-tree-id476 . -991) (undo-tree-id477 . -987) (undo-tree-id478 . -987) (undo-tree-id479 . -987) (undo-tree-id480 . -987) (undo-tree-id481 . -987) (undo-tree-id482 . -987) (undo-tree-id483 . -987) (undo-tree-id484 . -987) (undo-tree-id485 . -917) (undo-tree-id486 . -987) (undo-tree-id487 . -923) (undo-tree-id488 . -917) (undo-tree-id489 . -917) (undo-tree-id490 . -917) (undo-tree-id491 . -917) (undo-tree-id492 . -917) (undo-tree-id493 . -917) (undo-tree-id494 . -917) (undo-tree-id495 . -917) (undo-tree-id496 . -850) (undo-tree-id497 . -917) (undo-tree-id498 . -853) (undo-tree-id499 . -850) (undo-tree-id500 . -850) (undo-tree-id501 . -850) (undo-tree-id502 . -850) (undo-tree-id503 . -850) (undo-tree-id504 . -850) (undo-tree-id505 . -850) (undo-tree-id506 . -850) (undo-tree-id507 . -769) (undo-tree-id508 . -850) (undo-tree-id509 . -786) (undo-tree-id510 . -769) (undo-tree-id511 . -769) (undo-tree-id512 . -769) (undo-tree-id513 . -769) (undo-tree-id514 . -769) (undo-tree-id515 . -769) (undo-tree-id516 . -769) (undo-tree-id517 . -769) (undo-tree-id518 . -690) (undo-tree-id519 . -769) (undo-tree-id520 . -705) (undo-tree-id521 . -690) (undo-tree-id522 . -690) (undo-tree-id523 . -690) (undo-tree-id524 . -690) (undo-tree-id525 . -690) (undo-tree-id526 . -690) (undo-tree-id527 . -690) (undo-tree-id528 . -690) (undo-tree-id529 . -613) (undo-tree-id530 . -690) (undo-tree-id531 . -626) (undo-tree-id532 . -613) (undo-tree-id533 . -613) (undo-tree-id534 . -613) (undo-tree-id535 . -613) (undo-tree-id536 . -613) (undo-tree-id537 . -613) (undo-tree-id538 . -613) (undo-tree-id539 . -613) (undo-tree-id540 . -533) (undo-tree-id541 . -613) (undo-tree-id542 . -549) (undo-tree-id543 . -533) (undo-tree-id544 . -533) (undo-tree-id545 . -533) (undo-tree-id546 . -533) (undo-tree-id547 . -533) (undo-tree-id548 . -533) (undo-tree-id549 . -533) (undo-tree-id550 . -533) (undo-tree-id551 . -459) (undo-tree-id552 . -533) (undo-tree-id553 . -469) (undo-tree-id554 . -459) (undo-tree-id555 . -459) (undo-tree-id556 . -459) (undo-tree-id557 . -459) (undo-tree-id558 . -459) (undo-tree-id559 . -459) (undo-tree-id560 . -459) (undo-tree-id561 . -459) (undo-tree-id562 . -381) (undo-tree-id563 . -459) (undo-tree-id564 . -395) (undo-tree-id565 . -381) (undo-tree-id566 . -381) (undo-tree-id567 . -381) (undo-tree-id568 . -381) (undo-tree-id569 . -381) (undo-tree-id570 . -381) (undo-tree-id571 . -381) (undo-tree-id572 . -381) (undo-tree-id573 . -308) (undo-tree-id574 . -381) (undo-tree-id575 . -317) (undo-tree-id576 . -308) (undo-tree-id577 . -308) (undo-tree-id578 . -308) (undo-tree-id579 . -308) (undo-tree-id580 . -308) (undo-tree-id581 . -308) (undo-tree-id582 . -308) (undo-tree-id583 . -308) (undo-tree-id584 . -231) (undo-tree-id585 . -308) (undo-tree-id586 . -244) (undo-tree-id587 . -231) (undo-tree-id588 . -231) (undo-tree-id589 . -231) (undo-tree-id590 . -231) (undo-tree-id591 . -231) (undo-tree-id592 . -231) (undo-tree-id593 . -231) (undo-tree-id594 . -231) (undo-tree-id595 . -165) (undo-tree-id596 . -231) (undo-tree-id597 . -167) (undo-tree-id598 . -165) (undo-tree-id599 . -165) (undo-tree-id600 . -165) (undo-tree-id601 . -165) (undo-tree-id602 . -165) (undo-tree-id603 . -165) (undo-tree-id604 . -165) (undo-tree-id605 . -165) (undo-tree-id606 . -155) (undo-tree-id607 . -165) (undo-tree-id608 . -156) (undo-tree-id609 . -155) (undo-tree-id610 . -155) (undo-tree-id611 . -155) (undo-tree-id612 . -155) (undo-tree-id613 . -155) (undo-tree-id614 . -155) (undo-tree-id615 . -155) (undo-tree-id616 . -155) (undo-tree-id617 . -153) (undo-tree-id618 . -155) (undo-tree-id619 . -155) (undo-tree-id620 . -153) (undo-tree-id621 . -153) (undo-tree-id622 . -153) (undo-tree-id623 . -153) (undo-tree-id624 . -153) (undo-tree-id625 . -153) (undo-tree-id626 . -153) (undo-tree-id627 . -153) (undo-tree-id628 . -96) (undo-tree-id629 . -153) (undo-tree-id630 . -97) (undo-tree-id631 . -96) (undo-tree-id632 . -96) (undo-tree-id633 . -96) (undo-tree-id634 . -96) (undo-tree-id635 . -96) (undo-tree-id636 . -96) (undo-tree-id637 . -96) (undo-tree-id638 . -96) (undo-tree-id639 . -92) (undo-tree-id640 . -96) (undo-tree-id641 . -96) (undo-tree-id642 . -92) (undo-tree-id643 . -92) (undo-tree-id644 . -92) (undo-tree-id645 . -92) (undo-tree-id646 . -92) (undo-tree-id647 . -92) (undo-tree-id648 . -92) (undo-tree-id649 . -92) (undo-tree-id650 . -26) (undo-tree-id651 . -92) (undo-tree-id652 . -28) (undo-tree-id653 . -26) (undo-tree-id654 . -26) (undo-tree-id655 . -26) (undo-tree-id656 . -26) (undo-tree-id657 . -26) (undo-tree-id658 . -26) (undo-tree-id659 . -26) (undo-tree-id660 . -26) (undo-tree-id661 . -26) (undo-tree-id662 . -26) (undo-tree-id663 . -26) (undo-tree-id664 . -26) (undo-tree-id665 . -26) (undo-tree-id666 . -26) (undo-tree-id667 . -26) (undo-tree-id668 . -26) (undo-tree-id669 . -26) (undo-tree-id670 . -26) (undo-tree-id671 . -26) (undo-tree-id672 . -26) (undo-tree-id673 . -26) (undo-tree-id674 . -26) (undo-tree-id675 . -26) (undo-tree-id676 . -26) (undo-tree-id677 . -26) (undo-tree-id678 . -26) (undo-tree-id679 . -5081) (undo-tree-id680 . -5081) (undo-tree-id681 . -26) (undo-tree-id682 . -26) (undo-tree-id683 . -26) (undo-tree-id684 . -5081) (undo-tree-id685 . -26) (undo-tree-id686 . -26) (undo-tree-id687 . -26) (undo-tree-id688 . -26) (undo-tree-id689 . -26) (undo-tree-id690 . -26) (undo-tree-id691 . -26) (undo-tree-id692 . -26) (undo-tree-id693 . -26) (undo-tree-id694 . -26) (undo-tree-id695 . -26) (undo-tree-id696 . -26) (undo-tree-id697 . -26) (undo-tree-id698 . -26) (undo-tree-id699 . -26) (undo-tree-id700 . -26) (undo-tree-id701 . -26) (undo-tree-id702 . -5081) (undo-tree-id703 . -5081) (undo-tree-id704 . -26) (undo-tree-id705 . -5081) (undo-tree-id706 . -5081) (undo-tree-id707 . -5081) (undo-tree-id708 . -5081) (undo-tree-id709 . -5081) (undo-tree-id710 . -5081) (undo-tree-id711 . -5081) (undo-tree-id712 . -5081) (undo-tree-id713 . -5081) (undo-tree-id714 . -5081) (undo-tree-id715 . -5081) (undo-tree-id716 . -5081) (undo-tree-id717 . -5081) (undo-tree-id718 . -5081) (undo-tree-id719 . -5081) (undo-tree-id720 . -5081) 6541 (t 25266 23394 796011 739000)) nil (25266 23453 149418 0) 0 nil] [nil nil ((3376 . 3379) (t 25266 23394 796011 739000)) ((#("() " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 3376) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1)) (25266 23406 910483 0) 0 nil])
([nil current ((1469 . 1480) (#("k" 0 1 (fontified t)) . -1469) (undo-tree-id41 . -1) (1463 . 1470) (#("
" 0 1 (fontified t)) . -1463) (undo-tree-id42 . -1) (#("
" 0 1 (fontified t)) . -1464) (undo-tree-id43 . -1) 1465 (1463 . 1465) (1460 . 1463)) nil (25266 23453 148970 0) 0 nil])
nil
nil
